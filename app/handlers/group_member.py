import logging
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from app.db.repository import UserRepo, GroupRepo
from app.keyboards.reply import get_regular_member_menu, get_main_menu_unregistered

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == "üö™ –í—ã–π—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø—ã")
async def leave_group(message: Message, state: FSMContext, user_repo: UserRepo, group_repo: GroupRepo):
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership:
            await message.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            return

        if user.group_membership.is_leader:
            await message.answer("–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —Å—Ç–∞—Ä–æ—Å—Ç–æ–π –≥—Ä—É–ø–ø—ã. –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É¬ª.")
            return

        group = user.group_membership.group
        success = await group_repo.leave_group(group_id=str(group.id), user_id=user.telegram_id)
        if success:
            await state.clear()
            await message.answer(
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –≥—Ä—É–ø–ø—É ¬´{group.name}¬ª.",
                reply_markup=get_main_menu_unregistered()
            )
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ª–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ leave_group: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üìÖ –°–æ–±—ã—Ç–∏—è")
async def handle_events_and_booking(message: Message, group_repo: GroupRepo, user_repo: UserRepo):
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏.")
            return

        group = user.group_membership.group
        events = await group_repo.get_group_events(group.id)
        if not events:
            await message.answer("–°–æ–±—ã—Ç–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ.")
        else:
            event_list = "\n".join([f"- {e.title} ({e.date}) {'[–í–∞–∂–Ω–æ–µ]' if e.is_important else ''}" for e in events])
            await message.answer(f"–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:\n{event_list}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_events_and_booking: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("calendar"))
@router.message(F.text == "üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def show_calendar_member(message: Message, state: FSMContext, user_repo: UserRepo, group_repo: GroupRepo):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–µ—Å—è—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    try:
        from app.handlers import calendar
        await calendar.show_calendar(message, user_repo, group_repo, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_calendar_member: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("weekly_calendar"))
@router.message(F.text == "üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def show_weekly_calendar_member(message: Message, user_repo: UserRepo, group_repo: GroupRepo):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—å–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    try:
        from app.handlers.weekly_calendar import show_weekly_calendar
        await show_weekly_calendar(message, user_repo, group_repo)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_weekly_calendar_member: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã")
async def handle_group_members_leader(message: Message, user_repo: UserRepo, group_repo: GroupRepo):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã —Å —Ä–æ–ª—è–º–∏."""
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã.")
            return

        group = user.group_membership.group
        members = await group_repo.get_group_members(group.id)
        if not members:
            await message.answer("–í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            return

        member_list = []
        for member in members:
            member_user = await user_repo.get_user_with_group_info(member.user_id)
            if member_user:
                role = "–°—Ç–∞—Ä–æ—Å—Ç–∞" if member.is_leader else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç" if member.is_assistant else "–£—á–∞—Å—Ç–Ω–∏–∫"
                full_name = f"{member_user.last_name or ''} {member_user.first_name} {member_user.middle_name or ''}".strip()
                member_info = f"{full_name} (@{member_user.telegram_username or '–±–µ–∑ –∏–º–µ–Ω–∏'}) - {role}"
                member_list.append(member_info)

        response = f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã ¬´{group.name}¬ª:\n" + "\n".join(member_list)
        await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_group_members: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
