import logging
import re
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from app.db.repository import UserRepo, GroupRepo
from app.keyboards.reply import get_calendar_keyboard  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞

router = Router()
logger = logging.getLogger(__name__)

class CreateEvent(StatesGroup):
    waiting_for_event_name = State()
    waiting_for_event_date = State()
    waiting_for_description = State()
    waiting_for_subject = State()
    waiting_for_importance = State()

@router.message(Command("assistant_menu"))
async def show_assistant_menu(message: Message, user_repo: UserRepo):
    user = await user_repo.get_user_with_group_info(message.from_user.id)
    if user and user.group_membership and user.group_membership.is_assistant:
        await message.answer("–ú–µ–Ω—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≥—Ä—É–ø–ø—ã. –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")

@router.message(F.text == "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏")
async def manage_events(message: Message, user_repo: UserRepo, group_repo: GroupRepo):
    user = await user_repo.get_user_with_group_info(message.from_user.id)
    if user and user.group_membership and user.group_membership.is_assistant:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ\nüìÖ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", reply_markup=get_main_menu_leader())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏.")

@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ")
async def start_create_event(message: Message, state: FSMContext, user_repo: UserRepo, group_repo: GroupRepo):
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership or not user.group_membership.is_assistant:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π.")
            return

        await state.set_state(CreateEvent.waiting_for_event_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_create_event: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(CreateEvent.waiting_for_event_name)
async def process_event_name(message: Message, state: FSMContext, group_repo: GroupRepo, user_repo: UserRepo):
    try:
        event_name = message.text.strip()
        if len(event_name) < 3 or len(event_name) > 100:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        await state.update_data(event_name=event_name)
        await state.set_state(CreateEvent.waiting_for_event_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-06-15):")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_event_name: {e}")
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(CreateEvent.waiting_for_event_date)
async def process_event_date(message: Message, state: FSMContext, group_repo: GroupRepo, user_repo: UserRepo):
    try:
        event_date = message.text.strip()
        if not re.match(r'^\d{4}-\d{2}-\d{2}$', event_date):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD.")
            return

        await state.update_data(date=event_date)
        await state.set_state(CreateEvent.waiting_for_description)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_event_date: {e}")
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(CreateEvent.waiting_for_description)
async def process_event_description(message: Message, state: FSMContext, group_repo: GroupRepo, user_repo: UserRepo):
    try:
        description = message.text.strip() if message.text.strip().lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None
        await state.update_data(description=description)
        await state.set_state(CreateEvent.waiting_for_subject)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_event_description: {e}")
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(CreateEvent.waiting_for_subject)
async def process_event_subject(message: Message, state: FSMContext, group_repo: GroupRepo, user_repo: UserRepo):
    try:
        subject = message.text.strip() if message.text.strip().lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None
        await state.update_data(subject=subject)
        await state.set_state(CreateEvent.waiting_for_importance)
        await message.answer("–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –≤–∞–∂–Ω—ã–º? (–î–∞/–ù–µ—Ç)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_event_subject: {e}")
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(CreateEvent.waiting_for_importance)
async def process_event_importance(message: Message, state: FSMContext, group_repo: GroupRepo, user_repo: UserRepo):
    try:
        is_important = message.text.strip().lower() in ["–¥–∞", "yes"]
        data = await state.get_data()
        event_name = data.get("event_name")
        event_date = data.get("date")
        description = data.get("description")
        subject = data.get("subject")
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if user and user.group_membership:
            await group_repo.create_event(
                group_id=user.group_membership.group.id,
                created_by_user_id=user.telegram_id,  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ user.id, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ UUID
                title=event_name,
                description=description,
                subject=subject,
                date=event_date,
                is_important=is_important
            )
            await state.clear()
            await message.answer(f"–°–æ–±—ã—Ç–∏–µ ¬´{event_name}¬ª –Ω–∞ {event_date} —Å–æ–∑–¥–∞–Ω–æ! {'[–í–∞–∂–Ω–æ–µ]' if is_important else ''}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_event_importance: {e}")
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def show_calendar_assistant(message: Message, user_repo: UserRepo, group_repo: GroupRepo):
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership or not user.group_membership.is_assistant:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.")
            return

        group = user.group_membership.group
        events = await group_repo.get_group_events(group.id)
        calendar = get_calendar_keyboard(events)
        await message.answer("–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π:", reply_markup=calendar)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_calendar_assistant: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
