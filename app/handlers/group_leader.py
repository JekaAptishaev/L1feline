import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.db.repository import GroupRepo, UserRepo
from app.keyboards.reply import get_main_menu_leader, get_assistant_menu, get_regular_member_menu


router = Router()
logger = logging.getLogger(__name__)

class CreateInvite(StatesGroup):
    waiting_for_invite_duration = State()

class DeleteMember(StatesGroup):
    waiting_for_member_number = State()

class MakeAssistant(StatesGroup):
    waiting_for_member_number = State()

class RemoveAssistant(StatesGroup):
    waiting_for_member_number = State()

@router.message(F.text == "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã*")
async def handle_group_members(message: Message, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership or not user.group_membership.is_leader:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã.")
            return

        group = user.group_membership.group
        members = await group_repo.get_group_members(group.id)
        if not members:
            await message.answer("–í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            return

        member_list = []
        for idx, member in enumerate(members, 1):
            member_user = await user_repo.get_user_with_group_info(member.user_id)
            if member_user:
                role = "–°—Ç–∞—Ä–æ—Å—Ç–∞" if member.is_leader else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç" if member.is_assistant else "–£—á–∞—Å—Ç–Ω–∏–∫"
                member_info = f"{idx}. {member_user.first_name} {member_user.last_name or ''} (@{member_user.telegram_username or '–±–µ–∑ –∏–º–µ–Ω–∏'}) - {role}"
                member_list.append(member_info)

        response = f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã ¬´{group.name}¬ª:\n" + "\n".join(member_list)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ä–æ—Å—Ç—ã
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–£–¥–∞–ª–∏—Ç—å", callback_data="delete_member")
        keyboard.button(text="–°–¥–µ–ª–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º", callback_data="make_assistant")
        keyboard.button(text="–£–±—Ä–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", callback_data="remove_assistant")
        keyboard.adjust(2)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
        await message.answer(response, reply_markup=keyboard.as_markup())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_group_members: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "delete_member")
async def start_delete_member(callback: CallbackQuery, state: FSMContext, user_repo: UserRepo, group_repo: GroupRepo):
    try:
        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership or not user.group_membership.is_leader:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            await callback.answer()
            return

        group = user.group_membership.group
        members = await group_repo.get_group_members(group.id)
        if not members:
            await callback.message.answer("–í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            await callback.answer()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(members=members, group_id=group.id)
        await state.set_state(DeleteMember.waiting_for_member_number)
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_member")
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –∂–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard.as_markup())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_delete_member: {e}")
        await state.clear()
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()

@router.callback_query(F.data == "make_assistant")
async def start_make_assistant(callback: CallbackQuery, state: FSMContext, user_repo: UserRepo, group_repo: GroupRepo):
    try:
        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership or not user.group_membership.is_leader:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤.")
            await callback.answer()
            return

        group = user.group_membership.group
        members = await group_repo.get_group_members(group.id)
        if not members:
            await callback.message.answer("–í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            await callback.answer()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(members=members, group_id=group.id)
        await state.set_state(MakeAssistant.waiting_for_member_number)
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_make_assistant")
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º:", reply_markup=keyboard.as_markup())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_make_assistant: {e}")
        await state.clear()
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()

@router.callback_query(F.data == "remove_assistant")
async def start_remove_assistant(callback: CallbackQuery, state: FSMContext, user_repo: UserRepo, group_repo: GroupRepo):
    try:
        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership or not user.group_membership.is_leader:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤.")
            await callback.answer()
            return

        group = user.group_membership.group
        members = await group_repo.get_group_members(group.id)
        if not members:
            await callback.message.answer("–í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            await callback.answer()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(members=members, group_id=group.id)
        await state.set_state(RemoveAssistant.waiting_for_member_number)
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_remove_assistant")
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –∂–µ–ª–∞–µ—Ç–µ —Å–Ω—è—Ç—å —Ä–æ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:", reply_markup=keyboard.as_markup())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_remove_assistant: {e}")
        await state.clear()
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()

@router.callback_query(F.data == "cancel_delete_member")
async def cancel_delete_member(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await callback.message.delete()
        await callback.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu_leader())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_delete_member: {e}")
        await state.clear()
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()

@router.callback_query(F.data == "cancel_make_assistant")
async def cancel_make_assistant(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await callback.message.delete()
        await callback.message.answer("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu_leader())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_make_assistant: {e}")
        await state.clear()
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()

@router.callback_query(F.data == "cancel_remove_assistant")
async def cancel_remove_assistant(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await callback.message.delete()
        await callback.message.answer("–°–Ω—è—Ç–∏–µ —Ä–æ–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu_leader())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_remove_assistant: {e}")
        await state.clear()
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()

@router.message(DeleteMember.waiting_for_member_number)
async def process_delete_member(message: Message, state: FSMContext, user_repo: UserRepo, group_repo: GroupRepo):
    try:
        data = await state.get_data()
        members = data.get("members")
        group_id = data.get("group_id")
        if not members or not group_id:
            await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –∏–ª–∏ –≥—Ä—É–ø–ø–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            await state.clear()
            return

        try:
            member_number = int(message.text.strip())
            if member_number < 1 or member_number > len(members):
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ (—á–∏—Å–ª–æ).")
            return

        member_to_delete = members[member_number - 1]
        member_user = await user_repo.get_user_with_group_info(member_to_delete.user_id)
        if not member_user:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ä–æ—Å—Ç–∞ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if member_user.telegram_id == message.from_user.id:
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –∏–∑ –≥—Ä—É–ø–ø—ã.")
            await state.clear()
            return

        # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await group_repo.delete_member(group_id=group_id, user_id=member_to_delete.user_id)
        await state.clear()
        await message.answer(
            f"–£—á–∞—Å—Ç–Ω–∏–∫ {member_user.first_name} {member_user.last_name or ''} —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã.",
            reply_markup=get_main_menu_leader()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_delete_member: {e}")
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(MakeAssistant.waiting_for_member_number)
async def process_make_assistant(message: Message, state: FSMContext, user_repo: UserRepo, group_repo: GroupRepo, bot: Bot):
    try:
        data = await state.get_data()
        members = data.get("members")
        group_id = data.get("group_id")
        if not members or not group_id:
            await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –∏–ª–∏ –≥—Ä—É–ø–ø–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            await state.clear()
            return

        try:
            member_number = int(message.text.strip())
            if member_number < 1 or member_number > len(members):
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ (—á–∏—Å–ª–æ).")
            return

        member_to_update = members[member_number - 1]
        member_user = await user_repo.get_user_with_group_info(member_to_update.user_id)
        if not member_user:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º —Å—Ç–∞—Ä–æ—Å—Ç—É –∏–ª–∏ —É–∂–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if member_to_update.is_leader:
            await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ä–æ—Å—Ç–æ–π.")
            await state.clear()
            return
        if member_to_update.is_assistant:
            await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.")
            await state.clear()
            return

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
        await group_repo.make_assistant(group_id=group_id, user_id=member_to_update.user_id)
        await bot.send_message(
            member_user.telegram_id,
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π.",
            reply_markup=get_assistant_menu()
        )
        await state.clear()
        await message.answer(
            f"–£—á–∞—Å—Ç–Ω–∏–∫ {member_user.first_name} {member_user.last_name or ''} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.",
            reply_markup=get_main_menu_leader()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_make_assistant: {e}")
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(RemoveAssistant.waiting_for_member_number)
async def process_remove_assistant(message: Message, state: FSMContext, user_repo: UserRepo, group_repo: GroupRepo, bot: Bot):
    try:
        data = await state.get_data()
        members = data.get("members")
        group_id = data.get("group_id")
        if not members or not group_id:
            await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –∏–ª–∏ –≥—Ä—É–ø–ø–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            await state.clear()
            return

        try:
            member_number = int(message.text.strip())
            if member_number < 1 or member_number > len(members):
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ (—á–∏—Å–ª–æ).")
            return

        member_to_update = members[member_number - 1]
        member_user = await user_repo.get_user_with_group_info(member_to_update.user_id)
        if not member_user:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
        if not member_to_update.is_assistant:
            await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.")
            await state.clear()
            return

        # –°–Ω–∏–º–∞–µ–º —Ä–æ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        await group_repo.remove_assistant(group_id=group_id, user_id=member_to_update.user_id)

        await bot.send_message(
            member_user.telegram_id,
            "–í–∞—à–∞ —Ä–æ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–Ω—è—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞.",
            reply_markup=get_regular_member_menu()
        )
        await state.clear()
        await message.answer(
            f"–° —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_user.first_name} {member_user.last_name or ''} —Å–Ω—è—Ç–∞ —Ä–æ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.",
            reply_markup=get_main_menu_leader()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_remove_assistant: {e}")
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Ä–æ–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üîó –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ")
async def start_create_invite(message: Message, state: FSMContext, user_repo: UserRepo, group_repo: GroupRepo):
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership or not user.group_membership.is_leader:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞.")
            return

        group = user.group_membership.group
        
        invite_token = await group_repo.create_invite(group.id, user.telegram_id)
        await state.clear()
        await message.answer(
            f"–ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞ —Å–æ–∑–¥–∞–Ω!\n–ö–ª—é—á: {invite_token}\n–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ ¬´{group.name}¬ª."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_create_invite: {e}")
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")