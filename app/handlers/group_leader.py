import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from app.db.repository import GroupRepo
from app.keyboards.reply import get_main_menu_leader

router = Router()
logger = logging.getLogger(__name__)

class CreateGroup(StatesGroup):
    waiting_for_name = State()

@router.message(CreateGroup.waiting_for_name)
async def process_group_name(message: Message, state: FSMContext, group_repo: GroupRepo):
    try:
        group_name = message.text.strip()
        if len(group_name) < 3:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç 3 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        if len(group_name) > 255:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        await group_repo.create_group(name=group_name, creator_id=message.from_user.id)

        await state.clear()
        await message.answer(
            f"üéâ –ì—Ä—É–ø–ø–∞ ¬´{group_name}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –í—ã —Ç–µ–ø–µ—Ä—å –µ—ë —Å—Ç–∞—Ä–æ—Å—Ç–∞.",
            reply_markup=get_main_menu_leader()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_group_name: {e}")
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üìÖ –°–æ–±—ã—Ç–∏—è –∏ –ë—Ä–æ–Ω—å")
async def handle_events_and_booking(message: Message):
    try:
        await message.answer("–†–∞–∑–¥–µ–ª '–°–æ–±—ã—Ç–∏—è –∏ –ë—Ä–æ–Ω—å' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_events_and_booking: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã")
async def handle_group_members(message: Message):
    try:
        await message.answer("–†–∞–∑–¥–µ–ª '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_group_members: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã")
async def handle_group_settings(message: Message):
    try:
        await message.answer("–†–∞–∑–¥–µ–ª '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_group_settings: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")