from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.db.repository import UserRepo, GroupRepo
from app.keyboards.reply import get_main_menu_leader

router = Router()


class CreateBooking(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_num_topics = State()
    waiting_for_topics = State()


@router.message(F.text == "üìÖ –°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω—å")
async def start_create_booking(message: Message, state: FSMContext, user_repo: UserRepo):
    user = await user_repo.get_user_with_group_info(message.from_user.id)
    if not user or not user.group_membership or not user.group_membership.is_leader:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏.")
        return

    await state.set_state(CreateBooking.waiting_for_name)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_booking")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏:", reply_markup=keyboard.as_markup())


@router.message(CreateBooking.waiting_for_name)
async def process_booking_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(CreateBooking.waiting_for_description)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description")
    keyboard.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_booking")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—Ä–æ–Ω–∏:", reply_markup=keyboard.as_markup())


@router.callback_query(F.data == "skip_description")
async def skip_description(callback: CallbackQuery, state: FSMContext):
    await state.update_data(description=None)
    await state.set_state(CreateBooking.waiting_for_num_topics)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_booking")
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º:", reply_markup=keyboard.as_markup())
    await callback.answer()


@router.message(CreateBooking.waiting_for_description)
async def process_booking_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(CreateBooking.waiting_for_num_topics)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_booking")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º:", reply_markup=keyboard.as_markup())


@router.message(CreateBooking.waiting_for_num_topics)
async def process_num_topics(message: Message, state: FSMContext):
    try:
        num_topics = int(message.text)
        if num_topics <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        await state.update_data(num_topics=num_topics, current_topic=0, topics=[])
        await state.set_state(CreateBooking.waiting_for_topics)
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_booking")
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É 1 –∏–∑ {num_topics}:", reply_markup=keyboard.as_markup())
    except ValueError:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_booking")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:", reply_markup=keyboard.as_markup())


@router.message(CreateBooking.waiting_for_topics)
async def process_topic(message: Message, state: FSMContext):
    data = await state.get_data()
    topics = data['topics']
    current_topic = data['current_topic']
    num_topics = data['num_topics']

    topics.append(message.text)
    current_topic += 1
    await state.update_data(topics=topics, current_topic=current_topic)

    if current_topic < num_topics:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_booking")
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É {current_topic + 1} –∏–∑ {num_topics}:", reply_markup=keyboard.as_markup())
    else:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await message.answer("–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=get_main_menu_leader())
        await state.clear()


@router.callback_query(F.data == "cancel_booking")
async def cancel_booking(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu_leader())
    await callback.answer()