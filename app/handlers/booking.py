# booking.py
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.db.repository import GroupRepo
from datetime import datetime

router = Router()
logger = logging.getLogger(__name__)


class CreateBooking(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_slots_type = State()
    waiting_for_slots_count = State()
    waiting_for_slot_names = State()


@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω—å")
async def start_booking_creation(message: Message, state: FSMContext, user_repo: UserRepo):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏"""
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership or not user.group_membership.is_leader:
            await message.answer("–¢–æ–ª—å–∫–æ —Å—Ç–∞—Ä–æ—Å—Ç–∞ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±—Ä–æ–Ω–∏.")
            return

        await state.set_state(CreateBooking.waiting_for_title)

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        cancel_kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏:",
            reply_markup=cancel_kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_booking_creation: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(CreateBooking.waiting_for_title)
async def process_booking_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–æ–Ω–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return

    await state.update_data(title=message.text)
    await state.set_state(CreateBooking.waiting_for_description)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–∞
    skip_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—Ä–æ–Ω–∏ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
        reply_markup=skip_kb
    )


@router.message(CreateBooking.waiting_for_description)
async def process_booking_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –±—Ä–æ–Ω–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return

    description = None
    if message.text != "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        description = message.text

    await state.update_data(description=description)
    await state.set_state(CreateBooking.waiting_for_slots_type)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±—Ä–æ–Ω–∏
    type_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéØ –ë—Ä–æ–Ω—å —Ç–µ–º—ã")],
            [KeyboardButton(text="üìç –ë—Ä–æ–Ω—å –º–µ—Å—Ç–∞")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—Ä–æ–Ω–∏:",
        reply_markup=type_kb
    )


@router.message(CreateBooking.waiting_for_slots_type)
async def process_slots_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±—Ä–æ–Ω–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return

    if message.text not in ["üéØ –ë—Ä–æ–Ω—å —Ç–µ–º—ã", "üìç –ë—Ä–æ–Ω—å –º–µ—Å—Ç–∞"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    is_theme_booking = message.text == "üéØ –ë—Ä–æ–Ω—å —Ç–µ–º—ã"
    await state.update_data(is_theme_booking=is_theme_booking)
    await state.set_state(CreateBooking.waiting_for_slots_count)

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏:",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(CreateBooking.waiting_for_slots_count)
async def process_slots_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ—Ç–æ–≤"""
    try:
        slots_count = int(message.text)
        if slots_count <= 0 or slots_count > 20:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20.")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    data = await state.get_data()
    is_theme_booking = data.get('is_theme_booking', False)

    await state.update_data(slots_count=slots_count)

    if is_theme_booking:
        await state.set_state(CreateBooking.waiting_for_slot_names)
        await state.update_data(current_slot=1, slot_names=[])

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )

        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã 1 –∏–∑ {slots_count}:",
            reply_markup=edit_kb
        )
    else:
        # –î–ª—è –±—Ä–æ–Ω–∏ –º–µ—Å—Ç —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º
        await create_booking_complete(message, state)


async def create_booking_complete(message: Message, state: FSMContext, group_repo: GroupRepo):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏"""
    data = await state.get_data()
    title = data['title']
    description = data.get('description')
    slots_count = data['slots_count']
    is_theme_booking = data['is_theme_booking']

    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏ –≤ –ë–î
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    slot_type = "—Ç–µ–º" if is_theme_booking else "–º–µ—Å—Ç"
    result_message = (
        f"‚úÖ –ë—Ä–æ–Ω—å —Å–æ–∑–¥–∞–Ω–∞!\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        f"–¢–∏–ø: –ë—Ä–æ–Ω—å {slot_type}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {slots_count}"
    )

    if is_theme_booking:
        slot_names = data.get('slot_names', [])
        result_message += "\n–¢–µ–º—ã:\n" + "\n".join(
            [f"{i + 1}. {name}" for i, name in enumerate(slot_names)]
        )

    await message.answer(
        result_message,
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()


@router.message(CreateBooking.waiting_for_slot_names)
async def process_slot_name(message: Message, state: FSMContext, group_repo: GroupRepo):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–µ–º"""
    data = await state.get_data()
    current_slot = data['current_slot']
    slots_count = data['slots_count']
    slot_names = data['slot_names']

    if message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é":
        if current_slot > 1:
            current_slot -= 1
            slot_names.pop()
            await state.update_data(current_slot=current_slot, slot_names=slot_names)
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã {current_slot} –∏–∑ {slots_count}:"
            )
        else:
            await message.answer("–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–µ–º—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
    slot_names.append(message.text)
    await state.update_data(slot_names=slot_names)

    if current_slot == slots_count:
        # –í—Å–µ —Ç–µ–º—ã –≤–≤–µ–¥–µ–Ω—ã
        await create_booking_complete(message, state, group_repo)
    else:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É
        next_slot = current_slot + 1
        await state.update_data(current_slot=next_slot)

        edit_kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )

        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã {next_slot} –∏–∑ {slots_count}:",
            reply_markup=edit_kb
        )