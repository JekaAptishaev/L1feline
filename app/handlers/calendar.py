# app/handlers/calendar.py
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from app.db.repository import GroupRepo, UserRepo
from app.keyboards.reply import get_calendar_keyboard
from app.handlers.weekly_calendar import router as weekly_calendar_router  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
from datetime import datetime

router = Router()
router.include_router(weekly_calendar_router)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
logger = logging.getLogger(__name__)

@router.message(F.text == "üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def show_calendar(message: Message, user_repo: UserRepo, group_repo: GroupRepo):
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership:
            await message.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            return

        group = user.group_membership.group
        events = await group_repo.get_group_events(group.id)
        logger.info(f"Events retrieved for calendar: {[event.date for event in events]}")
        calendar = get_calendar_keyboard(events)
        await message.answer("–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π:", reply_markup=calendar)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_calendar: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("event_"))
async def handle_event_details(callback: CallbackQuery, group_repo: GroupRepo):
    try:
        event_id = callback.data.replace("event_", "")
        event = await group_repo.get_event_by_id(event_id)
        if event:
            details = f"–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {event.title}\n–î–∞—Ç–∞: {event.date.strftime('%Y-%m-%d')}"
            if event.description:
                details += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {event.description}"
            if event.subject:
                details += f"\n–¢–µ–º–∞: {event.subject}"
            details += f"\n{'[–í–∞–∂–Ω–æ–µ]' if event.is_important else ''}"
            await callback.message.edit_text(details)
        else:
            await callback.message.edit_text("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_event_details: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data == "back")
async def handle_back(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo):
    try:
        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if user and user.group_membership:
            events = await group_repo.get_group_events(user.group_membership.group.id)
            calendar = get_calendar_keyboard(events)
            if calendar:
                await callback.message.edit_reply_markup(reply_markup=calendar)
            else:
                await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å.")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_back: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)