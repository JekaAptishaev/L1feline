import re
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from app.db.repository import UserRepo, GroupRepo
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.orm import selectinload
from app.db.models import User

router = Router()
logger = logging.getLogger(__name__)

class SelectMonth(StatesGroup):
    waiting_for_month = State()

def get_month_weeks_keyboard(month: str) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –Ω–µ–¥–µ–ª—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞."""
    year, month = map(int, month.split("-"))
    weeks = [
        ("1 –Ω–µ–¥–µ–ª—è (1-7)", f"week_1_{year}_{month}"),
        ("2 –Ω–µ–¥–µ–ª—è (8-14)", f"week_2_{year}_{month}"),
        ("3 –Ω–µ–¥–µ–ª—è (15-21)", f"week_3_{year}_{month}"),
        ("4 –Ω–µ–¥–µ–ª—è (22-28/30/31)", f"week_4_{year}_{month}"),
    ]
    inline_keyboard = [
        [InlineKeyboardButton(text=text, callback_data=data)] for text, data in weeks
    ] + [[InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü", callback_data="select_month")]]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

def get_week_days_keyboard(days_with_events, week_num: int, month: int, year: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏ –∏ –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥ –∫ –º–µ—Å—è—Ü–∞–º'."""
    inline_keyboard = [
        [InlineKeyboardButton(text=str(day), callback_data=f"day_{day}_{month}_{year}")] for day in days_with_events
    ]
    inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –º–µ—Å—è—Ü–∞–º", callback_data=f"month_back_{year}_{month}")])
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

def get_day_events_keyboard(events, day: int, month: int, year: int, week_num: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –¥–Ω—è –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π."""
    inline_keyboard = [
        [InlineKeyboardButton(text=f"{event.title} {'[–í–∞–∂–Ω–æ–µ]' if event.is_important else ''}", callback_data=f"event_{event.id}")]
        for event in events
    ]
    prev_day = datetime(year, month, day) - timedelta(days=1)
    next_day = datetime(year, month, day) + timedelta(days=1)
    inline_keyboard.append([
        InlineKeyboardButton(text="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å", callback_data=f"day_{prev_day.day}_{prev_day.month}_{prev_day.year}"),
        InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å", callback_data=f"day_{next_day.day}_{next_day.month}_{next_day.year}")
    ])
    inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –Ω–µ–¥–µ–ª—è–º", callback_data=f"week_back_{week_num}_{year}_{month}")])
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

def get_day_back_button(day: int, month: int, year: int, week_num: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π –¥–Ω—è –∏ –Ω–µ–¥–µ–ª—è–º."""
    inline_keyboard = [
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –¥–Ω—é", callback_data=f"day_back_{day}_{month}_{year}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –Ω–µ–¥–µ–ª—è–º", callback_data=f"week_back_{week_num}_{year}_{month}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

def get_cancel_button(year: int, month: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ—Å—è—Ü–∞–º."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"month_back_{year}_{month}")]
    ])

@router.message(F.text == "üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def show_calendar(message: Message, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å'."""
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership:
            await message.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            return

        current_month = datetime.now().strftime("%Y-%m")
        await state.update_data(current_month=current_month)
        keyboard = get_month_weeks_keyboard(current_month)
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è {current_month}:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_calendar: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("week_") & ~F.data.startswith("week_back_"))
async def handle_week_selection(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏."""
    try:
        logger.info(f"handle_week_selection called with callback.data: {callback.data}")
        _, week_num, year, month = callback.data.split("_")
        year, month, week_num = int(year), int(month), int(week_num)
        start_day = (week_num - 1) * 7 + 1
        end_day = start_day + 6
        if week_num == 4:
            end_day = min(end_day, (datetime(year, month + 1, 1) - timedelta(days=1)).day if month < 12 else 31)

        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        group = user.group_membership.group
        events = await group_repo.get_group_events(group.id)
        week_events = [
            event for event in events
            if start_day <= event.date.day <= end_day and event.date.month == month and event.date.year == year
        ]

        if not week_events:
            await callback.message.edit_text("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ.")
            await callback.answer()
            return

        days_with_events = sorted(set(event.date.day for event in week_events))
        keyboard = get_week_days_keyboard(days_with_events, week_num, month, year)
        await callback.message.edit_text(f"–î–Ω–∏ —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –Ω–∞ {week_num}-–π –Ω–µ–¥–µ–ª–µ:", reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_week_selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("day_") & ~F.data.startswith("day_back_"))
async def handle_day_selection(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è."""
    try:
        logger.info(f"handle_day_selection called with callback.data: {callback.data}")
        _, day, month, year = callback.data.split("_")
        day, month, year = int(day), int(month), int(year)
        event_date = datetime(year, month, day).date()
        week_num = ((day - 1) // 7) + 1

        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        group = user.group_membership.group
        events = await group_repo.get_group_events(group.id)
        day_events = [event for event in events if event.date == event_date]

        if not day_events:
            await callback.message.edit_text("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.")
            await callback.answer()
            return

        keyboard = get_day_events_keyboard(day_events, day, month, year, week_num)
        await callback.message.edit_text(
            f"–°–æ–±—ã—Ç–∏—è –Ω–∞ {event_date.strftime('%Y-%m-%d')}:",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_day_selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("event_"))
async def handle_event_details(callback: CallbackQuery, group_repo: GroupRepo):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è."""
    try:
        logger.info(f"handle_event_details called with callback.data: {callback.data}")
        event_id = callback.data.replace("event_", "")
        event = await group_repo.get_event_by_id(event_id)
        if event:
            details = (
                f"–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è:\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event.title}\n"
                f"–î–∞—Ç–∞: {event.date.strftime('%Y-%m-%d')}\n"
            )
            if event.description:
                details += f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.description}\n"
            if event.subject:
                details += f"–¢–µ–º–∞: {event.subject}\n"
            details += f"{'[–í–∞–∂–Ω–æ–µ]' if event.is_important else ''}"
            week_num = ((event.date.day - 1) // 7) + 1
            keyboard = get_day_back_button(event.date.day, event.date.month, event.date.year, week_num)
            await callback.message.edit_text(details, reply_markup=keyboard)
        else:
            await callback.message.edit_text("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_event_details: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("day_back_"))
async def handle_day_back(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π –¥–Ω—è."""
    try:
        logger.info(f"handle_day_back called with callback.data: {callback.data}")
        _, _, day, month, year = callback.data.split("_")
        day, month, year = int(day), int(month), int(year)
        event_date = datetime(year, month, day).date()
        week_num = ((day - 1) // 7) + 1

        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        group = user.group_membership.group
        events = await group_repo.get_group_events(group.id)
        day_events = [event for event in events if event.date == event_date]

        if not day_events:
            await callback.message.edit_text("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.")
            await callback.answer()
            return

        keyboard = get_day_events_keyboard(day_events, day, month, year, week_num)
        await callback.message.edit_text(
            f"–°–æ–±—ã—Ç–∏—è –Ω–∞ {event_date.strftime('%Y-%m-%d')}:",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_day_back: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


@router.callback_query(F.data.startswith("week_back_"))
async def handle_week_back(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    try:
        logger.info(f"handle_week_back called with callback.data: {callback.data}")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–Ω–µ–¥–µ–ª—è, –≥–æ–¥, –º–µ—Å—è—Ü)
        parts = callback.data.split('_')
        week_num = int(parts[-3])  # —Ç—Ä–µ—Ç—å—è —Å –∫–æ–Ω—Ü–∞
        year = int(parts[-2])  # –≤—Ç–æ—Ä–∞—è —Å –∫–æ–Ω—Ü–∞
        month = int(parts[-1])  # –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å

        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        start_day = (week_num - 1) * 7 + 1
        end_day = start_day + 6
        if week_num == 4:
            end_day = min(end_day, (datetime(year, month + 1, 1) - timedelta(days=1)).day if month < 12 else 31)

        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        group = user.group_membership.group
        events = await group_repo.get_group_events(group.id)
        week_events = [
            event for event in events
            if start_day <= event.date.day <= end_day and event.date.month == month and event.date.year == year
        ]

        if not week_events:
            await callback.message.edit_text("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ.")
            await callback.answer()
            return

        days_with_events = sorted(set(event.date.day for event in week_events))
        keyboard = get_week_days_keyboard(days_with_events, week_num, month, year)
        await callback.message.edit_text(f"–î–Ω–∏ —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –Ω–∞ {week_num}-–π –Ω–µ–¥–µ–ª–µ:", reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_week_back: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("month_back_"))
async def handle_month_back(callback: CallbackQuery, state: FSMContext):
    try:
        logger.info(f"handle_month_back called with callback.data: {callback.data}")
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —ç–ª–µ–º–µ–Ω—Ç–∞
        parts = callback.data.split("_")
        year = parts[-2]  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        month = parts[-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        year, month = int(year), int(month)
        selected_month = f"{year}-{month:02d}"
        await state.update_data(current_month=selected_month)
        keyboard = get_month_weeks_keyboard(selected_month)
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è {selected_month}:", reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_month_back: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data == "select_month")
async def start_select_month(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞."""
    try:
        logger.info(f"start_select_month called with callback.data: {callback.data}")
        data = await state.get_data()
        current_month = data.get("current_month", datetime.now().strftime("%Y-%m"))
        year, month = map(int, current_month.split("-"))
        await state.set_state(SelectMonth.waiting_for_month)
        keyboard = get_cancel_button(year, month)
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM, YYYY MM –∏–ª–∏ YYYYMM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07, 2025 07, 202507). "
            "–î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7).",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_select_month: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.message(SelectMonth.waiting_for_month)
async def process_month_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–µ—Å—è—Ü–∞."""
    try:
        input_text = message.text.strip()
        current_year = datetime.now().year
        if len(input_text) in (1, 2) and input_text.isdigit():
            month = int(input_text)
            if 1 <= month <= 12:
                selected_month = f"{current_year}-{month:02d}"
            else:
                raise ValueError("–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12.")
        elif len(input_text) == 7 and input_text[4] in ('-', ' '):
            year, month = input_text.split(input_text[4])
            selected_month = f"{int(year)}-{int(month):02d}"
        elif len(input_text) == 6 and input_text.isdigit():
            year = int(input_text[:4])
            month = int(input_text[4:6])
            if 1 <= month <= 12:
                selected_month = f"{year}-{month:02d}"
            else:
                raise ValueError("–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12.")
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")

        await state.update_data(current_month=selected_month)
        keyboard = get_month_weeks_keyboard(selected_month)
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è {selected_month}:", reply_markup=keyboard)
        await state.clear()
    except ValueError as ve:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(ve)} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_month_input: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")