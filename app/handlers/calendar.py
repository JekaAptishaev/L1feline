import re
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload
from app.db.repository import UserRepo, GroupRepo
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.db.models import User, Event, TopicList, Topic, TopicSelection, Queue, QueueParticipant
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()
logger = logging.getLogger(__name__)

class SelectMonth(StatesGroup):
    waiting_for_month = State()

class BookingInteraction(StatesGroup):
    selecting_topic = State()
    selecting_queue_position = State()

def get_month_weeks_keyboard(month: str) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –Ω–µ–¥–µ–ª—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞."""
    year, month = map(int, month.split("-"))
    weeks = [
        ("1 –Ω–µ–¥–µ–ª—è (1-7)", f"week_1_{year}_{month}"),
        ("2 –Ω–µ–¥–µ–ª—è (8-14)", f"week_2_{year}_{month}"),
        ("3 –Ω–µ–¥–µ–ª—è (15-21)", f"week_3_{year}_{month}"),
        ("4 –Ω–µ–¥–µ–ª—è (22-28/30/31)", f"week_4_{year}_{month}"),
    ]
    inline_keyboard = [
        [InlineKeyboardButton(text=text, callback_data=data)] for text, data in weeks
    ] + [[InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü", callback_data="select_month")]]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

def get_week_days_keyboard(days_with_events, week_num: int, month: int, year: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏ –∏ –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥ –∫ –Ω–µ–¥–µ–ª—è–º'."""
    inline_keyboard = [
        [InlineKeyboardButton(text=str(day), callback_data=f"day_{day}_{month}_{year}")] for day in days_with_events
    ]
    inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –Ω–µ–¥–µ–ª—è–º", callback_data=f"month_back_{year}_{month}")])
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

async def get_day_events_keyboard(events, day: int, month: int, year: int, week_num: int, week_events: list, group_repo: GroupRepo) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –¥–Ω—è –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π."""
    inline_keyboard = []
    for event in events:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–º –∏–ª–∏ –æ—á–µ—Ä–µ–¥–∏
        topic_list = await group_repo.get_topic_list_by_event(event.id)
        queue = await group_repo.get_queue_by_event(event.id)
        booking_label = ""
        if topic_list:
            booking_label = "[–¢–µ–º—ã]"
        elif queue:
            booking_label = "[–û—á–µ—Ä–µ–¥—å]"
        button_text = f"{event.title} {booking_label}{' [–í–∞–∂–Ω–æ–µ]' if event.is_important else ''}"
        inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"event_{event.id}")])

    # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    start_week_day = (week_num - 1) * 7 + 1
    last_day_of_month = (datetime(year, month + 1, 1) - timedelta(days=1)).day if month < 12 else 31
    end_week_day = min(start_week_day + 6, last_day_of_month)

    # –ù–∞—Ö–æ–¥–∏–º –¥–Ω–∏ —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –≤ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ
    event_days = sorted(set(event.date.day for event in week_events if event.date.month == month and event.date.year == year))

    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —Å —Å–æ–±—ã—Ç–∏—è–º–∏
    current_date = datetime(year, month, day).date()
    prev_event_day = None
    next_event_day = None

    for event_day in event_days:
        event_date = datetime(year, month, event_day).date()
        if event_date < current_date and event_day >= start_week_day:
            prev_event_day = event_day
        if event_date > current_date and event_day <= end_week_day and (next_event_day is None or event_day < next_event_day):
            next_event_day = event_day

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if prev_event_day:
        prev_date = datetime(year, month, prev_event_day)
        nav_buttons.append(
            InlineKeyboardButton(
                text="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å",
                callback_data=f"day_{prev_date.day}_{prev_date.month}_{prev_date.year}"
            )
        )
    else:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚èπ –†–∞–Ω—å—à–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π",
                callback_data="no_events_earlier"
            )
        )

    if next_event_day:
        next_date = datetime(year, month, next_event_day)
        nav_buttons.append(
            InlineKeyboardButton(
                text="–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å",
                callback_data=f"day_{next_date.day}_{next_date.month}_{next_date.year}"
            )
        )
    else:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚èπ –î–∞–ª—å—à–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π",
                callback_data="no_events_later"
            )
        )

    inline_keyboard.append(nav_buttons)
    inline_keyboard.append(
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è", callback_data=f"week_back_{week_num}_{year}_{month}")]
    )
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

def get_day_back_button(day: int, month: int, year: int, week_num: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π –¥–Ω—è –∏ –Ω–µ–¥–µ–ª—è–º."""
    inline_keyboard = [
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –¥–Ω—é", callback_data=f"day_back_{day}_{month}_{year}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è", callback_data=f"week_back_{week_num}_{year}_{month}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

def get_cancel_button(year: int, month: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–µ–¥–µ–ª—è–º."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"month_back_{year}_{month}")]
    ])

@router.message(F.text == "üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def show_calendar(message: Message, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å'."""
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership:
            await message.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            return

        current_month = datetime.now().strftime("%Y-%m")
        await state.update_data(current_month=current_month)
        keyboard = get_month_weeks_keyboard(current_month)
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è {current_month}:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_calendar: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("week_") & ~F.data.startswith("week_back_"))
async def handle_week_selection(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏."""
    try:
        logger.info(f"handle_week_selection called with callback.data: {callback.data}")
        _, week_num, year, month = callback.data.split("_")
        year, month, week_num = int(year), int(month), int(week_num)
        start_day = (week_num - 1) * 7 + 1
        end_day = start_day + 6
        if week_num == 4:
            end_day = min(end_day, (datetime(year, month + 1, 1) - timedelta(days=1)).day if month < 12 else 31)

        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        group = user.group_membership.group
        events = await group_repo.get_group_events(group.id)
        week_events = [
            event for event in events
            if start_day <= event.date.day <= end_day and event.date.month == month and event.date.year == year
        ]

        keyboard = get_week_days_keyboard([], week_num, month, year)  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if not week_events:
            await callback.message.edit_text(
                "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—è—Ü–∞.",
                reply_markup=keyboard
            )
            await callback.answer()
            return

        days_with_events = sorted(set(event.date.day for event in week_events))
        keyboard = get_week_days_keyboard(days_with_events, week_num, month, year)
        await callback.message.edit_text(f"–î–Ω–∏ —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –Ω–∞ {week_num}-–π –Ω–µ–¥–µ–ª–µ:", reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_week_selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("day_") & ~F.data.startswith("day_back_"))
async def handle_day_selection(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è."""
    try:
        logger.info(f"handle_day_selection called with callback.data: {callback.data}")
        _, day, month, year = callback.data.split("_")
        day, month, year = int(day), int(month), int(year)
        event_date = datetime(year, month, day).date()
        week_num = ((day - 1) // 7) + 1

        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        group = user.group_membership.group
        events = await group_repo.get_group_events(group.id)
        day_events = [event for event in events if event.date == event_date]

        if not day_events:
            await callback.message.edit_text("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.")
            await callback.answer()
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        start_day = (week_num - 1) * 7 + 1
        end_day = min(start_day + 6, (datetime(year, month + 1, 1) - timedelta(days=1)).day if month < 12 else 31)
        week_events = [
            event for event in events
            if start_day <= event.date.day <= end_day and event.date.month == month and event.date.year == year
        ]

        keyboard = await get_day_events_keyboard(day_events, day, month, year, week_num, week_events, group_repo)
        await callback.message.edit_text(
            f"–°–æ–±—ã—Ç–∏—è –Ω–∞ {event_date.strftime('%Y-%m-%d')}:",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_day_selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("event_"))
async def handle_event_details(callback: CallbackQuery, group_repo: GroupRepo, user_repo: UserRepo, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è."""
    try:
        logger.info(f"handle_event_details called with callback.data: {callback.data}")
        event_id = callback.data.replace("event_", "")
        event = await group_repo.get_event_by_id(event_id)
        if not event:
            await callback.message.edit_text("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await callback.answer()
            return

        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        details = (
            f"–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event.title}\n"
            f"–î–∞—Ç–∞: {event.date.strftime('%Y-%m-%d')}\n"
        )
        if event.description:
            details += f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.description}\n"
        if event.subject:
            details += f"–¢–µ–º–∞: {event.subject}\n"
        details += f"{'[–í–∞–∂–Ω–æ–µ]' if event.is_important else ''}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–∫–∏ —Ç–µ–º –∏–ª–∏ –æ—á–µ—Ä–µ–¥—å
        topic_list = await group_repo.get_topic_list_by_event(event.id)
        queue = await group_repo.get_queue_by_event(event.id)

        keyboard = InlineKeyboardBuilder()
        if topic_list:
            topics = await group_repo.get_topics_by_topic_list(topic_list.id)
            details += f"\n–°–ø–∏—Å–æ–∫ —Ç–µ–º ({len(topics)}):\n"
            for topic in topics:
                selections = await group_repo.get_topic_selections(topic.id)
                details += f"- {topic.title} ({len(selections)}/{topic_list.max_participants_per_topic})\n"
            if not user.group_membership.is_leader and not user.group_membership.is_assistant:
                keyboard.button(text="–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É", callback_data=f"select_topic_{event.id}")
        if queue:
            participants = await group_repo.get_queue_participants(queue.id)
            details += f"\n–û—á–µ—Ä–µ–¥—å ({len(participants)}/{queue.max_participants or '‚àû'}):\n"
            for participant in participants:
                participant_user = await user_repo.get_user_with_group_info(participant.user_id)
                details += f"{participant.position}. {participant_user.first_name} {participant_user.last_name or ''}\n"
            if not user.group_membership.is_leader and not user.group_membership.is_assistant:
                keyboard.button(text="–ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ", callback_data=f"select_queue_{event.id}")

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ä–æ—Å—Ç –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
        if user.group_membership.is_leader or user.group_membership.is_assistant:
            keyboard.button(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_event_{event.id}")
            keyboard.button(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_event_{event.id}")

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–Ω—é
        week_num = ((event.date.day - 1) // 7) + 1
        keyboard.button(text="–ù–∞–∑–∞–¥ –∫ –¥–Ω—é", callback_data=f"day_back_{event.date.day}_{event.date.month}_{event.date.year}")
        await callback.message.edit_text(details, reply_markup=keyboard.as_markup())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_event_details: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("select_topic_"))
async def handle_topic_selection(callback: CallbackQuery, group_repo: GroupRepo, user_repo: UserRepo, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã."""
    try:
        event_id = callback.data.replace("select_topic_", "")
        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        topic_list = await group_repo.get_topic_list_by_event(event_id)
        if not topic_list:
            await callback.message.edit_text("–°–ø–∏—Å–æ–∫ —Ç–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return

        topics = await group_repo.get_topics_by_topic_list(topic_list.id)
        if not topics:
            await callback.message.edit_text("–¢–µ–º –Ω–µ—Ç.")
            await callback.answer()
            return

        keyboard = InlineKeyboardBuilder()
        for topic in topics:
            selections = await group_repo.get_topic_selections(topic.id)
            if len(selections) < topic_list.max_participants_per_topic:
                keyboard.button(text=f"{topic.title} ({len(selections)}/{topic_list.max_participants_per_topic})", callback_data=f"topic_{topic.id}")
        keyboard.button(text="–û—Ç–º–µ–Ω–∞", callback_data=f"event_{event_id}")
        await state.set_state(BookingInteraction.selecting_topic)
        await state.update_data(event_id=event_id)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=keyboard.as_markup())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_topic_selection: {e}")
        await state.clear()
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("topic_"))
async def process_topic_selection(callback: CallbackQuery, group_repo: GroupRepo, user_repo: UserRepo, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã."""
    try:
        topic_id = callback.data.replace("topic_", "")
        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        data = await state.get_data()
        event_id = data.get("event_id")

        topic_list = await group_repo.get_topic_list_by_event(event_id)
        selections = await group_repo.get_topic_selections(topic_id)
        if len(selections) >= topic_list.max_participants_per_topic:
            await callback.message.edit_text("–≠—Ç–∞ —Ç–µ–º–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.")
            await state.clear()
            await callback.answer()
            return

        await group_repo.create_topic_selection(
            topic_id=topic_id,
            user_id=user.telegram_id
        )
        topics = await group_repo.get_topics_by_topic_list(topic_list.id)
        topic = next(t for t in topics if t.id == topic_id)
        await state.clear()
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–ù–∞–∑–∞–¥", callback_data=f"event_{event_id}")
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: {topic.title}", reply_markup=keyboard.as_markup())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_topic_selection: {e}")
        await state.clear()
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("select_queue_"))
async def handle_queue_selection(callback: CallbackQuery, group_repo: GroupRepo, user_repo: UserRepo, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏."""
    try:
        event_id = callback.data.replace("select_queue_", "")
        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        queue = await group_repo.get_queue_by_event(event_id)
        if not queue:
            await callback.message.edit_text("–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await callback.answer()
            return

        participants = await group_repo.get_queue_participants(queue.id)
        if queue.max_participants and len(participants) >= queue.max_participants:
            await callback.message.edit_text("–û—á–µ—Ä–µ–¥—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.")
            await callback.answer()
            return

        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–æ–±–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        taken_positions = {p.position for p in participants}
        next_position = 1
        while next_position in taken_positions:
            next_position += 1

        await group_repo.create_queue_participant(
            queue_id=queue.id,
            user_id=user.telegram_id,
            position=next_position
        )
        await state.clear()
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–ù–∞–∑–∞–¥", callback_data=f"event_{event_id}")
        await callback.message.edit_text(f"–í—ã –∑–∞–Ω—è–ª–∏ –º–µ—Å—Ç–æ #{next_position} –≤ –æ—á–µ—Ä–µ–¥–∏.", reply_markup=keyboard.as_markup())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_queue_selection: {e}")
        await state.clear()
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("day_back_"))
async def handle_day_back(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π –¥–Ω—è."""
    try:
        logger.info(f"handle_day_back called with callback.data: {callback.data}")
        _, _, day, month, year = callback.data.split("_")
        day, month, year = int(day), int(month), int(year)
        event_date = datetime(year, month, day).date()
        week_num = ((day - 1) // 7) + 1

        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        group = user.group_membership.group
        events = await group_repo.get_group_events(group.id)
        day_events = [event for event in events if event.date == event_date]

        if not day_events:
            await callback.message.edit_text("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.")
            await callback.answer()
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        start_day = (week_num - 1) * 7 + 1
        end_day = min(start_day + 6, (datetime(year, month + 1, 1) - timedelta(days=1)).day if month < 12 else 31)
        week_events = [
            event for event in events
            if start_day <= event.date.day <= end_day and event.date.month == month and event.date.year == year
        ]

        keyboard = await get_day_events_keyboard(day_events, day, month, year, week_num, week_events, group_repo)
        await callback.message.edit_text(
            f"–°–æ–±—ã—Ç–∏—è –Ω–∞ {event_date.strftime('%Y-%m-%d')}:",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_day_back: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data == "no_events_earlier")
async def handle_no_events_earlier(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏, –∫–æ–≥–¥–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π —Ä–∞–Ω—å—à–µ."""
    await callback.answer("–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏–µ –¥–Ω–∏.", show_alert=True)

@router.callback_query(F.data == "no_events_later")
async def handle_no_events_later(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏, –∫–æ–≥–¥–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –ø–æ–∑–∂–µ."""
    await callback.answer("–î–∞–ª–µ–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç –¥–Ω–µ–π —Å —Å–æ–±—ã—Ç–∏—è–º–∏.", show_alert=True)

@router.callback_query(F.data.startswith("week_back_"))
async def handle_week_back(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏."""
    try:
        logger.info(f"handle_week_back called with callback.data: {callback.data}")
        parts = callback.data.split('_')
        week_num = int(parts[2])
        year = int(parts[3])
        month = int(parts[4])

        start_day = (week_num - 1) * 7 + 1
        end_day = start_day + 6
        if week_num == 4:
            end_day = min(end_day, (datetime(year, month + 1, 1) - timedelta(days=1)).day if month < 12 else 31)

        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        group = user.group_membership.group
        events = await group_repo.get_group_events(group.id)
        week_events = [
            event for event in events
            if start_day <= event.date.day <= end_day and event.date.month == month and event.date.year == year
        ]

        keyboard = get_week_days_keyboard([], week_num, month, year)
        if not week_events:
            await callback.message.edit_text(
                "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—è—Ü–∞.",
                reply_markup=keyboard
            )
            await callback.answer()
            return

        days_with_events = sorted(set(event.date.day for event in week_events))
        keyboard = get_week_days_keyboard(days_with_events, week_num, month, year)
        await callback.message.edit_text(f"–î–Ω–∏ —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –Ω–∞ {week_num}-–π –Ω–µ–¥–µ–ª–µ:", reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_week_back: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("month_back_"))
async def handle_month_back(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—è—Ü–∞."""
    try:
        logger.info(f"handle_month_back called with callback.data: {callback.data}")
        parts = callback.data.split('_')
        year = int(parts[-2])
        month = int(parts[-1])

        selected_month = f"{year}-{month:02d}"
        await state.update_data(current_month=selected_month)
        keyboard = get_month_weeks_keyboard(selected_month)
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è {selected_month}:", reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_month_back: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data == "select_month")
async def start_select_month(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞."""
    try:
        logger.info(f"start_select_month called with callback.data: {callback.data}")
        data = await state.get_data()
        current_month = data.get("current_month", datetime.now().strftime("%Y-%m"))
        year, month = map(int, current_month.split("-"))
        await state.set_state(SelectMonth.waiting_for_month)
        keyboard = get_cancel_button(year, month)
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM, YYYY MM –∏–ª–∏ YYYYMM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07, 2025 07, 202507). "
            "–î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7).",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_select_month: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.message(SelectMonth.waiting_for_month)
async def process_month_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–µ—Å—è—Ü–∞."""
    try:
        input_text = message.text.strip()
        current_year = datetime.now().year
        if len(input_text) in (1, 2) and input_text.isdigit():
            month = int(input_text)
            if 1 <= month <= 12:
                selected_month = f"{current_year}-{month:02d}"
            else:
                raise ValueError("–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12.")
        elif len(input_text) == 7 and input_text[4] in ('-', ' '):
            year, month = input_text.split(input_text[4])
            selected_month = f"{int(year)}-{int(month):02d}"
        elif len(input_text) == 6 and input_text.isdigit():
            year = int(input_text[:4])
            month = int(input_text[4:6])
            if 1 <= month <= 12:
                selected_month = f"{year}-{month:02d}"
            else:
                raise ValueError("–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12.")
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")

        await state.update_data(current_month=selected_month)
        keyboard = get_month_weeks_keyboard(selected_month)
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è {selected_month}:", reply_markup=keyboard)
        await state.clear()
    except ValueError as ve:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(ve)} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_month_input: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")