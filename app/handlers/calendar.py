import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime, timedelta
from app.db.repository import UserRepo, GroupRepo
from app.keyboards.reply import get_event_details_keyboard

router = Router()
logger = logging.getLogger(__name__)

class SelectWeek(StatesGroup):
    waiting_for_week = State()

class SelectMonth(StatesGroup):
    waiting_for_month = State()

MONTHS_RU = {
    1: "–Ø–Ω–≤–∞—Ä—å",
    2: "–§–µ–≤—Ä–∞–ª—å",
    3: "–ú–∞—Ä—Ç",
    4: "–ê–ø—Ä–µ–ª—å",
    5: "–ú–∞–π",
    6: "–ò—é–Ω—å",
    7: "–ò—é–ª—å",
    8: "–ê–≤–≥—É—Å—Ç",
    9: "–°–µ–Ω—Ç—è–±—Ä—å",
    10: "–û–∫—Ç—è–±—Ä—å",
    11: "–ù–æ—è–±—Ä—å",
    12: "–î–µ–∫–∞–±—Ä—å"
}

WEEKDAYS_RU = {
    0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    1: "–í—Ç–æ—Ä–Ω–∏–∫",
    2: "–°—Ä–µ–¥–∞",
    3: "–ß–µ—Ç–≤–µ—Ä–≥",
    4: "–ü—è—Ç–Ω–∏—Ü–∞",
    5: "–°—É–±–±–æ—Ç–∞",
    6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

def get_week_dates(offset=0, base_date=None):
    if base_date is None:
        base_date = datetime.now().date()
    start_of_week = base_date - timedelta(days=base_date.weekday())
    start_of_week += timedelta(weeks=offset)
    end_of_week = start_of_week + timedelta(days=6)
    return start_of_week, end_of_week

def format_week_label(start_date):
    end_date = start_date + timedelta(days=6)
    start_day = start_date.strftime("%d").lstrip("0")
    end_day = end_date.strftime("%d").lstrip("0")
    start_month = MONTHS_RU[start_date.month]
    month_name = start_month
    if start_date.month != end_date.month:
        end_month = MONTHS_RU[end_date.month]
        month_name = f"{start_month}-{end_month}"
    return f"{start_day}-{end_day} {month_name}"

def get_weekly_calendar_keyboard(events, start_of_week, show_week_selection=False, week_offset=0):
    inline_keyboard = []
    
    if events and not show_week_selection:
        for event in sorted(events, key=lambda e: e.date):
            day = event.date.strftime("%d").lstrip("0")
            weekday = WEEKDAYS_RU[event.date.weekday()]
            button_text = f"{day} {weekday}: {event.title} {'[–í–∞–∂–Ω–æ–µ]' if event.is_important else ''}"
            inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"event_{event.id}")])
    
    if not show_week_selection:
        nav_buttons = [
            InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –Ω–µ–¥–µ–ª—é", callback_data="select_week"),
            InlineKeyboardButton(text="–ü—Ä–æ—à–ª–∞—è", callback_data=f"week_{week_offset-1}"),
            InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è", callback_data=f"week_{week_offset+1}")
        ]
        inline_keyboard.append(nav_buttons)
    else:
        for i in range(-1, 2):
            week_start, _ = get_week_dates(week_offset + i)
            label = format_week_label(week_start)
            inline_keyboard.append([InlineKeyboardButton(text=label, callback_data=f"week_{week_offset+i}")])
        inline_keyboard.append([
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"shift_weeks_{week_offset-1}"),
            InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥", callback_data=f"shift_weeks_{week_offset+1}")
        ])
        inline_keyboard.append([InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü", callback_data="select_month")])
    
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

def get_month_selection_keyboard(current_year):
    inline_keyboard = []
    months = list(MONTHS_RU.items())
    for i in range(0, 12, 3):
        row = [
            InlineKeyboardButton(text=month_name, callback_data=f"month_{month_num}")
            for month_num, month_name in months[i:i+3]
        ]
        inline_keyboard.append(row)
    inline_keyboard.append([InlineKeyboardButton(text="–ö –º–µ—Å—è—Ü—É", callback_data="select_week")])
    inline_keyboard.append([
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="shift_year_-1"),
        InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥", callback_data="shift_year_1")
    ])
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

@router.message(F.text == "üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def show_calendar(message: Message, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership:
            await message.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            return

        group = user.group_membership.group
        start_of_week, end_of_week = get_week_dates()
        events = await group_repo.get_group_events(group.id)
        week_events = [event for event in events if start_of_week <= event.date <= end_of_week]
        
        start_day = start_of_week.strftime("%d").lstrip("0")
        start_month = MONTHS_RU[start_of_week.month]
        end_day = end_of_week.strftime("%d").lstrip("0")
        end_month = MONTHS_RU[end_of_week.month]
        keyboard = get_weekly_calendar_keyboard(week_events, start_of_week)
        await message.answer(
            f"–ù–µ–¥–µ–ª—è —Å {start_day} {start_month} –ø–æ {end_day} {end_month}",
            reply_markup=keyboard
        )
        await state.update_data(week_offset=0, current_year=datetime.now().year)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_calendar: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("week_"))
async def handle_week_selection(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    try:
        offset = int(callback.data.split("_")[1])
        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        group = user.group_membership.group
        start_of_week, end_of_week = get_week_dates(offset)
        events = await group_repo.get_group_events(group.id)
        week_events = [event for event in events if start_of_week <= event.date <= end_of_week]
        
        start_day = start_of_week.strftime("%d").lstrip("0")
        start_month = MONTHS_RU[start_of_week.month]
        end_day = end_of_week.strftime("%d").lstrip("0")
        end_month = MONTHS_RU[end_of_week.month]
        keyboard = get_weekly_calendar_keyboard(week_events, start_of_week, week_offset=offset)
        await callback.message.edit_text(
            f"–ù–µ–¥–µ–ª—è —Å {start_day} {start_month} –ø–æ {end_day} {end_month}",
            reply_markup=keyboard
        )
        await state.update_data(week_offset=offset)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_week_selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data == "select_week")
async def start_select_week(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    try:
        data = await state.get_data()
        week_offset = data.get("week_offset", 0)
        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        group = user.group_membership.group
        start_of_week, _ = get_week_dates(week_offset)
        keyboard = get_weekly_calendar_keyboard([], start_of_week, show_week_selection=True, week_offset=week_offset)
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –≥—Ä—É–ø–ø—ã ¬´{group.name}¬ª:",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_select_week: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data == "select_month")
async def start_select_month(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        current_year = data.get("current_year", datetime.now().year)
        keyboard = get_month_selection_keyboard(current_year)
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è {current_year} –≥–æ–¥–∞:",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_select_month: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("shift_year_"))
async def handle_year_shift(callback: CallbackQuery, state: FSMContext):
    try:
        year_offset = int(callback.data.split("_")[2])
        data = await state.get_data()
        current_year = data.get("current_year", datetime.now().year)
        new_year = current_year + year_offset
        keyboard = get_month_selection_keyboard(new_year)
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è {new_year} –≥–æ–¥–∞:",
            reply_markup=keyboard
        )
        await state.update_data(current_year=new_year)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_year_shift: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("month_"))
async def handle_month_selection(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    try:
        month = int(callback.data.split("_")[1])
        data = await state.get_data()
        current_year = data.get("current_year", datetime.now().year)
        
        first_day = datetime(current_year, month, 1).date()
        week_start = first_day - timedelta(days=first_day.weekday())
        today = datetime.now().date()
        current_week_start = today - timedelta(days=today.weekday())
        offset = (week_start - current_week_start).days // 7

        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        group = user.group_membership.group
        start_of_week, end_of_week = get_week_dates(offset)
        events = await group_repo.get_group_events(group.id)
        week_events = [event for event in events if start_of_week <= event.date <= end_of_week]
        
        start_day = start_of_week.strftime("%d").lstrip("0")
        start_month = MONTHS_RU[start_of_week.month]
        end_day = end_of_week.strftime("%d").lstrip("0")
        end_month = MONTHS_RU[end_of_week.month]
        keyboard = get_weekly_calendar_keyboard(week_events, start_of_week, week_offset=offset)
        await callback.message.edit_text(
            f"–ù–µ–¥–µ–ª—è —Å {start_day} {start_month} –ø–æ {end_day} {end_month}",
            reply_markup=keyboard
        )
        await state.update_data(week_offset=offset, current_year=current_year)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_month_selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("shift_weeks_"))
async def handle_shift_weeks(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    try:
        new_offset = int(callback.data.split("_")[2])
        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        group = user.group_membership.group
        start_of_week, _ = get_week_dates(new_offset)
        keyboard = get_weekly_calendar_keyboard([], start_of_week, show_week_selection=True, week_offset=new_offset)
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –≥—Ä—É–ø–ø—ã ¬´{group.name}¬ª:",
            reply_markup=keyboard
        )
        await state.update_data(week_offset=new_offset)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_shift_weeks: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("event_"))
async def handle_event_details(callback: CallbackQuery, group_repo: GroupRepo, user_repo: UserRepo, state: FSMContext):
    try:
        event_id = callback.data.replace("event_", "")
        event = await group_repo.get_event_by_id(event_id)
        if not event:
            await callback.message.edit_text("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await callback.answer()
            return

        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        queue_data = await user_repo.get_queue_entries(event_id)
        has_queue = bool(queue_data and "max_slots" in queue_data)
        is_in_queue = False
        if has_queue:
            for position, queued_user_id in queue_data["entries"].items():
                if int(queued_user_id) == callback.from_user.id:
                    is_in_queue = True
                    break

        data = await state.get_data()
        show_view_queue = data.get(f"show_view_queue_{event_id}", True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç–æ–π –∏–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
        can_delete = user.group_membership.is_leader or user.group_membership.is_assistant

        day = event.date.strftime("%d").lstrip("0")
        month = MONTHS_RU[event.date.month]
        year = event.date.strftime("%Y")
        details = (
            f"–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event.title}\n"
            f"–î–∞—Ç–∞: {day} {month} {year}\n"
        )
        if event.description:
            details += f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.description}\n"
        if event.subject:
            details += f"–¢–µ–º–∞: {event.subject}\n"
        details += f"{'[–í–∞–∂–Ω–æ–µ]' if event.is_important else ''}"
        if has_queue:
            details += f"\n–û—á–µ—Ä–µ–¥—å: {len(queue_data.get('entries', {}))}/{queue_data['max_slots']} –º–µ—Å—Ç –∑–∞–Ω—è—Ç–æ"

        keyboard = get_event_details_keyboard(event_id, has_queue, is_in_queue, show_view_queue, can_delete=can_delete)
        await callback.message.edit_text(details, reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_event_details: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("join_queue_"))
async def join_queue(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    try:
        event_id = callback.data.replace("join_queue_", "")
        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        success, message, is_in_queue = await user_repo.join_queue(event_id, user.telegram_id)
        event = await group_repo.get_event_by_id(event_id)
        if not event:
            await callback.message.edit_text("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await callback.answer()
            return

        queue_data = await user_repo.get_queue_entries(event_id)
        has_queue = bool(queue_data and "max_slots" in queue_data)

        data = await state.get_data()
        show_view_queue = data.get(f"show_view_queue_{event_id}", True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç–æ–π –∏–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
        can_delete = user.group_membership.is_leader or user.group_membership.is_assistant

        day = event.date.strftime("%d").lstrip("0")
        month = MONTHS_RU[event.date.month]
        year = event.date.strftime("%Y")
        details = (
            f"–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event.title}\n"
            f"–î–∞—Ç–∞: {day} {month} {year}\n"
        )
        if event.description:
            details += f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.description}\n"
        if event.subject:
            details += f"–¢–µ–º–∞: {event.subject}\n"
        details += f"{'[–í–∞–∂–Ω–æ–µ]' if event.is_important else ''}"
        if has_queue:
            details += f"\n–û—á–µ—Ä–µ–¥—å: {len(queue_data.get('entries', {}))}/{queue_data['max_slots']} –º–µ—Å—Ç –∑–∞–Ω—è—Ç–æ"

        keyboard = get_event_details_keyboard(event_id, has_queue, is_in_queue or success, show_view_queue, can_delete=can_delete)
        await callback.message.edit_text(details, reply_markup=keyboard)
        await callback.answer(message, show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ join_queue: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("leave_queue_"))
async def leave_queue(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    try:
        event_id = callback.data.replace("leave_queue_", "")
        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        success, message = await user_repo.leave_queue(event_id, user.telegram_id)
        event = await group_repo.get_event_by_id(event_id)
        if not event:
            await callback.message.edit_text("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await callback.answer()
            return

        queue_data = await user_repo.get_queue_entries(event_id)
        has_queue = bool(queue_data and "max_slots" in queue_data)
        is_in_queue = False

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ show_view_queue –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        await state.update_data(**{f"show_view_queue_{event_id}": True})
        show_view_queue = True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç–æ–π –∏–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
        can_delete = user.group_membership.is_leader or user.group_membership.is_assistant

        day = event.date.strftime("%d").lstrip("0")
        month = MONTHS_RU[event.date.month]
        year = event.date.strftime("%Y")
        details = (
            f"–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event.title}\n"
            f"–î–∞—Ç–∞: {day} {month} {year}\n"
        )
        if event.description:
            details += f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.description}\n"
        if event.subject:
            details += f"–¢–µ–º–∞: {event.subject}\n"
        details += f"{'[–í–∞–∂–Ω–æ–µ]' if event.is_important else ''}"
        if has_queue:
            details += f"\n–û—á–µ—Ä–µ–¥—å: {len(queue_data.get('entries', {}))}/{queue_data['max_slots']} –º–µ—Å—Ç –∑–∞–Ω—è—Ç–æ"

        keyboard = get_event_details_keyboard(event_id, has_queue, is_in_queue, show_view_queue, can_delete=can_delete)
        await callback.message.edit_text(details, reply_markup=keyboard)
        await callback.answer(message, show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ leave_queue: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("view_queue_"))
async def view_queue(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    try:
        event_id = callback.data.replace("view_queue_", "")
        event = await group_repo.get_event_by_id(event_id)
        if not event:
            await callback.message.edit_text("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await callback.answer()
            return

        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership or str(user.group_membership.group.id) != str(event.group_id):
            await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏.")
            await callback.answer()
            return

        queue_data = await user_repo.get_queue_entries(event_id)
        if not queue_data or "entries" not in queue_data:
            await callback.message.edit_text("–û—á–µ—Ä–µ–¥—å –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.")
            await callback.answer()
            return

        entries = queue_data["entries"]
        max_slots = queue_data["max_slots"]
        response = f"–û—á–µ—Ä–µ–¥—å –¥–ª—è —Å–æ–±—ã—Ç–∏—è ¬´{event.title}¬ª ({len(entries)}/{max_slots} –º–µ—Å—Ç –∑–∞–Ω—è—Ç–æ):\n"

        sorted_entries = sorted(entries.items(), key=lambda x: int(x[0]))
        for position, user_id in sorted_entries:
            user_info = await user_repo.get_user_with_group_info(int(user_id))
            if user_info:
                full_name = f"{user_info.last_name or ''} {user_info.first_name} {user_info.middle_name or ''}".strip()
                response += f"{position}. {full_name} (@{user_info.telegram_username or '–±–µ–∑ –∏–º–µ–Ω–∏'})\n"
            else:
                response += f"{position}. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id})\n"

        if not entries:
            response += "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞."

        is_in_queue = False
        for position, queued_user_id in entries.items():
            if int(queued_user_id) == callback.from_user.id:
                is_in_queue = True
                break

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç–æ–π –∏–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
        can_delete = user.group_membership.is_leader or user.group_membership.is_assistant

        await state.update_data(**{f"show_view_queue_{event_id}": False})
        await callback.message.edit_text(
            response,
            reply_markup=get_event_details_keyboard(event_id, True, is_in_queue, show_view_queue=False, can_delete=can_delete)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_queue: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—á–µ—Ä–µ–¥–∏.")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("delete_event_"))
async def delete_event(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    try:
        event_id = callback.data.replace("delete_event_", "")
        event = await group_repo.get_event_by_id(event_id)
        if not event:
            await callback.message.edit_text("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await callback.answer()
            return

        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç–æ–π –∏–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
        if not (user.group_membership.is_leader or user.group_membership.is_assistant):
            await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è.")
            await callback.answer()
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        await group_repo.delete_event(event_id)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
        data = await state.get_data()
        week_offset = data.get("week_offset", 0)
        group = user.group_membership.group
        start_of_week, end_of_week = get_week_dates(week_offset)
        events = await group_repo.get_group_events(group.id)
        week_events = [event for event in events if start_of_week <= event.date <= end_of_week]
        
        start_day = start_of_week.strftime("%d").lstrip("0")
        start_month = MONTHS_RU[start_of_week.month]
        end_day = end_of_week.strftime("%d").lstrip("0")
        end_month = MONTHS_RU[end_of_week.month]
        keyboard = get_weekly_calendar_keyboard(week_events, start_of_week, week_offset=week_offset)
        await callback.message.edit_text(
            f"–°–æ–±—ã—Ç–∏–µ ¬´{event.title}¬ª —É–¥–∞–ª–µ–Ω–æ.\n–ù–µ–¥–µ–ª—è —Å {start_day} {start_month} –ø–æ {end_day} {end_month}",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_event: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.", show_alert=True)