import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime, timedelta
from app.db.repository import UserRepo, GroupRepo

router = Router()
logger = logging.getLogger(__name__)

class SelectWeek(StatesGroup):
    waiting_for_week = State()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
MONTHS_RU = {
    1: "–Ø–Ω–≤–∞—Ä—å",
    2: "–§–µ–≤—Ä–∞–ª—å",
    3: "–ú–∞—Ä—Ç",
    4: "–ê–ø—Ä–µ–ª—å",
    5: "–ú–∞–π",
    6: "–ò—é–Ω—å",
    7: "–ò—é–ª—å",
    8: "–ê–≤–≥—É—Å—Ç",
    9: "–°–µ–Ω—Ç—è–±—Ä—å",
    10: "–û–∫—Ç—è–±—Ä—å",
    11: "–ù–æ—è–±—Ä—å",
    12: "–î–µ–∫–∞–±—Ä—å"
}

def get_week_dates(offset=0, base_date=None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è."""
    if base_date is None:
        base_date = datetime.now().date()
    start_of_week = base_date - timedelta(days=base_date.weekday())  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    start_of_week += timedelta(weeks=offset)  # –°–º–µ—â–µ–Ω–∏–µ
    end_of_week = start_of_week + timedelta(days=6)  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    return start_of_week, end_of_week

def format_week_label(start_date):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–µ—Ç–∫—É –Ω–µ–¥–µ–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, '02-08 –°–µ–Ω—Ç—è–±—Ä—å'."""
    end_date = start_date + timedelta(days=6)
    start_day = start_date.strftime("%d").lstrip("0")  # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π –Ω–æ–ª—å
    end_day = end_date.strftime("%d").lstrip("0")
    start_month = MONTHS_RU[start_date.month]
    month_name = start_month
    if start_date.month != end_date.month:
        end_month = MONTHS_RU[end_date.month]
        month_name = f"{start_month}-{end_month}"
    return f"{start_day}-{end_day} {month_name}"

def get_weekly_calendar_keyboard(events, start_of_week, show_week_selection=False, week_offset=0):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    inline_keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π
    if events and not show_week_selection:
        for event in sorted(events, key=lambda e: e.date):
            day = event.date.strftime("%d").lstrip("0")
            month = MONTHS_RU[event.date.month]
            button_text = f"{day} {month}: {event.title} {'[–í–∞–∂–Ω–æ–µ]' if event.is_important else ''}"
            inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"event_{event.id}")])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if not show_week_selection:
        nav_buttons = [
            InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –Ω–µ–¥–µ–ª—é", callback_data="select_week"),
            InlineKeyboardButton(text="–ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data=f"week_{week_offset-1}"),
            InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data=f"week_{week_offset+1}")
        ]
        inline_keyboard.append(nav_buttons)
    else:
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏
        for i in range(-1, 2):
            week_start, _ = get_week_dates(week_offset + i)
            label = format_week_label(week_start)
            inline_keyboard.append([InlineKeyboardButton(text=label, callback_data=f"week_{week_offset+i}")])
        # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–í–ø–µ—Ä—ë–¥"
        inline_keyboard.append([
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"shift_weeks_{week_offset-1}"),
            InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥", callback_data=f"shift_weeks_{week_offset+1}")
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

def get_event_back_button():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–µ–¥–µ–ª—å–Ω–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –Ω–µ–¥–µ–ª–µ", callback_data="week_0")]
    ])

@router.message(F.text == "üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def show_calendar(message: Message, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å' –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership:
            await message.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            return

        group = user.group_membership.group
        start_of_week, end_of_week = get_week_dates()  # –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è
        events = await group_repo.get_group_events(group.id)
        week_events = [event for event in events if start_of_week <= event.date <= end_of_week]
        
        day = start_of_week.strftime("%d").lstrip("0")
        month = MONTHS_RU[start_of_week.month]
        keyboard = get_weekly_calendar_keyboard(week_events, start_of_week)
        await message.answer(
            f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π –≥—Ä—É–ø–ø—ã ¬´{group.name}¬ª (–Ω–µ–¥–µ–ª—è —Å {day} {month}):",
            reply_markup=keyboard
        )
        await state.update_data(week_offset=0)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–º–µ—â–µ–Ω–∏–µ
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_calendar: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("week_"))
async def handle_week_selection(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏."""
    try:
        offset = int(callback.data.split("_")[1])
        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        group = user.group_membership.group
        start_of_week, end_of_week = get_week_dates(offset)
        events = await group_repo.get_group_events(group.id)
        week_events = [event for event in events if start_of_week <= event.date <= end_of_week]
        
        day = start_of_week.strftime("%d").lstrip("0")
        month = MONTHS_RU[start_of_week.month]
        keyboard = get_weekly_calendar_keyboard(week_events, start_of_week, week_offset=offset)
        await callback.message.edit_text(
            f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π –≥—Ä—É–ø–ø—ã ¬´{group.name}¬ª (–Ω–µ–¥–µ–ª—è —Å {day} {month}):",
            reply_markup=keyboard
        )
        await state.update_data(week_offset=offset)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_week_selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data == "select_week")
async def start_select_week(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏."""
    try:
        data = await state.get_data()
        week_offset = data.get("week_offset", 0)
        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        group = user.group_membership.group
        start_of_week, _ = get_week_dates(week_offset)
        keyboard = get_weekly_calendar_keyboard([], start_of_week, show_week_selection=True, week_offset=week_offset)
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –≥—Ä—É–ø–ø—ã ¬´{group.name}¬ª:",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_select_week: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("shift_weeks_"))
async def handle_shift_weeks(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ—â–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–µ–¥–µ–ª—å."""
    try:
        new_offset = int(callback.data.split("_")[2])
        user = await user_repo.get_user_with_group_info(callback.from_user.id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        group = user.group_membership.group
        start_of_week, _ = get_week_dates(new_offset)
        keyboard = get_weekly_calendar_keyboard([], start_of_week, show_week_selection=True, week_offset=new_offset)
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –≥—Ä—É–ø–ø—ã ¬´{group.name}¬ª:",
            reply_markup=keyboard
        )
        await state.update_data(week_offset=new_offset)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_shift_weeks: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("event_"))
async def handle_event_details(callback: CallbackQuery, group_repo: GroupRepo):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è."""
    try:
        event_id = callback.data.replace("event_", "")
        event = await group_repo.get_event_by_id(event_id)
        if event:
            day = event.date.strftime("%d").lstrip("0")
            month = MONTHS_RU[event.date.month]
            year = event.date.strftime("%Y")
            details = (
                f"–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è:\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event.title}\n"
                f"–î–∞—Ç–∞: {day} {month} {year}\n"
            )
            if event.description:
                details += f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.description}\n"
            if event.subject:
                details += f"–¢–µ–º–∞: {event.subject}\n"
            details += f"{'[–í–∞–∂–Ω–æ–µ]' if event.is_important else ''}"
            keyboard = get_event_back_button()
            await callback.message.edit_text(details, reply_markup=keyboard)
        else:
            await callback.message.edit_text("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_event_details: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)