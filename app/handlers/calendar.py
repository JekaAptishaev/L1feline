import logging
from aiogram import Router
from aiogram.types import Message
from app.db.repository import GroupRepo, UserRepo
from app.keyboards.reply import get_calendar_keyboard  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == "üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def show_calendar(message: Message, user_repo: UserRepo, group_repo: GroupRepo):
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership:
            await message.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            return

        group = user.group_membership.group
        events = await group_repo.get_group_events(group.id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –º–µ—Ç–æ–¥
        calendar = get_calendar_keyboard(events)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ reply.py
        await message.answer("–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π:", reply_markup=calendar)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_calendar: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
