import logging
import re
from uuid import UUID
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from app.db.repository import GroupRepo, UserRepo
from app.keyboards.reply import get_main_menu_leader, get_main_menu_member
from sqlalchemy import select
from app.db.models import TopicList, Topic, TopicSelection, Event

router = Router()
logger = logging.getLogger(__name__)

class CreateTopicList(StatesGroup):
    waiting_for_event_id = State()
    waiting_for_title = State()
    waiting_for_max_participants = State()
    waiting_for_topics = State()

class ReserveTopic(StatesGroup):
    waiting_for_topic_list_id = State()
    waiting_for_topic_id = State()

@router.message(F.text == "üìã –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º")
async def start_create_topic_list(message: Message, state: FSMContext, user_repo: UserRepo, group_repo: GroupRepo):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–µ–º –¥–ª—è —Å—Ç–∞—Ä–æ—Å—Ç—ã."""
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership or not user.group_membership.is_leader:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–µ–º.")
            return

        group_id = user.group_membership.group.id
        events = await group_repo.get_group_events(str(group_id))
        if not events:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –°–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—ã—Ç–∏–µ —Å–Ω–∞—á–∞–ª–∞.")
            return

        event_list = "\n".join([f"{e.id}: {e.title} ({e.date.strftime('%Y-%m-%d')})" for e in events])
        await state.set_state(CreateTopicList.waiting_for_event_id)
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ, –≤–≤–µ–¥—è –µ–≥–æ ID:\n{event_list}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_create_topic_list: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(CreateTopicList.waiting_for_event_id)
async def process_event_id(message: Message, state: FSMContext, user_repo: UserRepo, group_repo: GroupRepo):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ–±—ã—Ç–∏—è."""
    try:
        event_id = message.text.strip()
        try:
            UUID(event_id)
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å–æ–±—ã—Ç–∏—è. –í–≤–µ–¥–∏—Ç–µ UUID.")
            return

        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership:
            await message.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await state.clear()
            return

        group_id = user.group_membership.group.id
        event = await group_repo.get_event_by_id(event_id)
        if not event or event.group_id != group_id:
            await message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ.")
            return

        await state.update_data(event_id=event_id)
        await state.set_state(CreateTopicList.waiting_for_title)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–º:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_event_id: {e}", exc_info=True)
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(CreateTopicList.waiting_for_title)
async def process_topic_list_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–º."""
    try:
        title = message.text.strip()
        if not 1 <= len(title) <= 255:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        await state.update_data(title=title)
        await state.set_state(CreateTopicList.waiting_for_max_participants)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ–¥–Ω—É —Ç–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1):")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_topic_list_title: {e}", exc_info=True)
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(CreateTopicList.waiting_for_max_participants)
async def process_max_participants(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    try:
        max_participants = message.text.strip()
        try:
            max_participants = int(max_participants)
            if max_participants < 1:
                raise ValueError
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
            return

        await state.update_data(max_participants_per_topic=max_participants)
        await state.set_state(CreateTopicList.waiting_for_topics)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n1. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã\n2. –ù–∞–∑–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π —Ç–µ–º—ã\n...\n(–∫–∞–∂–¥–∞—è —Ç–µ–º–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—è —Å –Ω–æ–º–µ—Ä–∞)"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_max_participants: {e}", exc_info=True)
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(CreateTopicList.waiting_for_topics)
async def process_topics_input(message: Message, state: FSMContext, group_repo: GroupRepo, user_repo: UserRepo):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º."""
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership or not user.group_membership.is_leader:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–µ–º.")
            await state.clear()
            return

        topics_text = message.text.strip().split("\n")
        topics = []
        for line in topics_text:
            match = re.match(r'^\s*(\d+)\.\s*(.+)$', line)
            if not match:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '1. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã' –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ.")
                return
            number, title = match.groups()
            try:
                number = int(number)
                if number < 1:
                    raise ValueError
                title = title.strip()
                if not 1 <= len(title) <= 255:
                    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤.")
                    return
                topics.append((number, title, None))
            except ValueError:
                await message.answer("–ù–æ–º–µ—Ä —Ç–µ–º—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
                return

        data = await state.get_data()
        event_id = data.get("event_id")
        title = data.get("title")
        max_participants_per_topic = data.get("max_participants_per_topic")

        await group_repo.create_topic_list(
            event_id=event_id,
            title=title,
            max_participants_per_topic=max_participants_per_topic,
            created_by_user_id=user.telegram_id,
            topics=topics
        )
        await state.clear()
        await message.answer(
            f"–°–ø–∏—Å–æ–∫ —Ç–µ–º ¬´{title}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã.",
            reply_markup=get_main_menu_leader()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_topics_input: {e}", exc_info=True)
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üìã –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—É")
async def start_reserve_topic(message: Message, state: FSMContext, user_repo: UserRepo, group_repo: GroupRepo):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º—ã."""
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership:
            await message.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ —Å–Ω–∞—á–∞–ª–∞.")
            return

        group_id = user.group_membership.group.id
        topic_lists_stmt = select(TopicList).join(Event).where(Event.group_id == group_id)
        topic_lists_result = await group_repo.session.execute(topic_lists_stmt)
        topic_lists = topic_lists_result.scalars().all()

        if not topic_lists:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ —Ç–µ–º –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.")
            return

        topic_list_info = "\n".join([f"{tl.id}: {tl.title} (–°–æ–±—ã—Ç–∏–µ: {tl.event.title})" for tl in topic_lists])
        await state.set_state(ReserveTopic.waiting_for_topic_list_id)
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–µ–º, –≤–≤–µ–¥—è –µ–≥–æ ID:\n{topic_list_info}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_reserve_topic: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(ReserveTopic.waiting_for_topic_list_id)
async def process_topic_list_id(message: Message, state: FSMContext, user_repo: UserRepo, group_repo: GroupRepo):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–∏—Å–∫–∞ —Ç–µ–º –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        topic_list_id = message.text.strip()
        try:
            topic_list_id = UUID(topic_list_id)
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å–ø–∏—Å–∫–∞ —Ç–µ–º. –í–≤–µ–¥–∏—Ç–µ UUID.")
            return

        topic_list = await group_repo.get_topic_list(str(topic_list_id))
        if not topic_list:
            await message.answer("–°–ø–∏—Å–æ–∫ —Ç–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        topics = topic_list.topics
        if not topics:
            await message.answer("–í —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ—Ç —Ç–µ–º.")
            return

        topic_info = []
        for topic in topics:
            selections = [s for s in topic.selections if s.is_confirmed]
            available = topic_list.max_participants_per_topic - len(selections)
            status = f"–°–≤–æ–±–æ–¥–Ω–æ: {available}" if available > 0 else "–ó–∞–Ω—è—Ç–æ"
            topic_info.append(f"{topic.id}: {topic.title} ({status})")

        await state.update_data(topic_list_id=str(topic_list_id))
        await state.set_state(ReserveTopic.waiting_for_topic_id)
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, –≤–≤–µ–¥—è –µ—ë ID:\n" + "\n".join(topic_info))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_topic_list_id: {e}", exc_info=True)
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(ReserveTopic.waiting_for_topic_id)
async def process_topic_id(message: Message, state: FSMContext, user_repo: UserRepo, group_repo: GroupRepo):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        topic_id = message.text.strip()
        try:
            topic_id = UUID(topic_id)
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ç–µ–º—ã. –í–≤–µ–¥–∏—Ç–µ UUID.")
            return

        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership:
            await message.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await state.clear()
            return

        selection = await group_repo.reserve_topic(str(topic_id), user.telegram_id)
        if not selection:
            await message.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            await state.clear()
            return

        topic_stmt = select(Topic).where(Topic.id == UUID(topic_id))
        topic_result = await group_repo.session.execute(topic_stmt)
        topic = topic_result.scalar_one_or_none()

        await state.clear()
        await message.answer(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —Ç–µ–º—É ¬´{topic.title}¬ª! –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ—Å—Ç–æ–π.",
            reply_markup=get_main_menu_member()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_topic_id: {e}", exc_info=True)
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–º—ã")
async def view_topics(message: Message, user_repo: UserRepo, group_repo: GroupRepo):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏ –∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership:
            await message.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ —Å–Ω–∞—á–∞–ª–∞.")
            return

        group_id = user.group_membership.group.id
        topic_lists_stmt = select(TopicList).join(Event).where(Event.group_id == group_id)
        topic_lists_result = await group_repo.session.execute(topic_lists_stmt)
        topic_lists = topic_lists_result.scalars().all()

        if not topic_lists:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ —Ç–µ–º –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.")
            return

        response = []
        for topic_list in topic_lists:
            topic_list = await group_repo.get_topic_list(str(topic_list.id))
            response.append(f"–°–ø–∏—Å–æ–∫ —Ç–µ–º: {topic_list.title} (–°–æ–±—ã—Ç–∏–µ: {topic_list.event.title})")
            for topic in topic_list.topics:
                selections = [s for s in topic.selections if s.is_confirmed]
                if selections:
                    participants = ", ".join(
                        [f"{s.user.first_name} {s.user.last_name or ''} (@{s.user.telegram_username or '–±–µ–∑ –∏–º–µ–Ω–∏'})" for s in selections]
                    )
                    response.append(f"- {topic.title}: {participants}")
                else:
                    response.append(f"- {topic.title}: –°–≤–æ–±–æ–¥–Ω–æ")

        await message.answer("\n".join(response))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_topics: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")