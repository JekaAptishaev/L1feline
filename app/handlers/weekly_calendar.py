import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
from app.db.repository import UserRepo, GroupRepo
from app.keyboards.reply import get_weekly_calendar_keyboard, get_weekly_calendar_back_button
from app.db.models import User, TopicList, Topic, TopicSelection, Queue, QueueParticipant

router = Router()
logger = logging.getLogger(__name__)

class BookingInteraction(StatesGroup):
    selecting_topic = State()
    selecting_queue_position = State()

@router.message(Command("weekly_calendar"))
@router.message(F.text == "üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def show_weekly_calendar(message: Message, user_repo: UserRepo, group_repo: GroupRepo):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weekly_calendar –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ –Ω–µ–¥–µ–ª—è–º."""
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user or not user.group_membership:
            await message.reply("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            return

        group = user.group_membership.group
        # –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
        today = datetime.now().date()
        start_of_week = today - timedelta(days=today.weekday())
        events = await group_repo.get_group_events(group.id)
        logger.info(f"Events retrieved for weekly calendar: {[event.date for event in events]}")
        calendar = get_weekly_calendar_keyboard(events, start_of_week)
        await message.reply(
            f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π –≥—Ä—É–ø–ø—ã ¬´{group.name}¬ª (–Ω–µ–¥–µ–ª—è —Å {start_of_week.strftime('%Y-%m-%d')}):",
            reply_markup=calendar
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_weekly_calendar: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("week_"))
async def handle_week_navigation(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å."""
    try:
        user = await user_repo.get_user_with_group_info(callback.from_id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        group = user.group_membership.group
        week_offset = int(callback.data.split("_")[1])
        start_of_week = (datetime.now().date() - timedelta(days=datetime.now().date().weekday())) + timedelta(weeks=week_offset)
        events = await group_repo.get_group_events(group.id)
        calendar = get_weekly_calendar_keyboard(events, start_of_week)
        await callback.message.edit_text(
            f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π –≥—Ä—É–ø–ø—ã ¬´{group.name}¬ª (–Ω–µ–¥–µ–ª—è —Å {start_of_week.strftime('%Y-%m-%d')}):",
            reply_markup=calendar
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_week_navigation: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("event_"))
async def handle_event_details(callback: CallbackQuery, group_repo: GroupRepo, user_repo: UserRepo, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è."""
    try:
        event_id = callback.data.replace("event_", "")
        event = await group_repo.get_event_by_id(event_id)
        if not event:
            await callback.message.edit_text("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await callback.answer()
            return

        user = await user_repo.get_user_with_group_info(callback.from_id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        details = (
            f"–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event.title}\n"
            f"–î–∞—Ç–∞: {event.date.strftime('%Y-%m-%d')}\n"
        )
        if event.description:
            details += f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.description}\n"
        if event.subject:
            details += f"–¢–µ–º–∞: {event.subject}\n"
        details += f"{'[–í–∞–∂–Ω–æ–µ]' if event.is_important else ''}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–∫–∏ —Ç–µ–º –∏–ª–∏ –æ—á–µ—Ä–µ–¥—å
        topic_list = await group_repo.get_topic_list_by_event(event.id)
        queue = await group_repo.get_queue_by_event(event.id)

        keyboard = InlineKeyboardBuilder()
        if topic_list:
            topics = await group_repo.get_topics_by_topic_list(topic_list.id)
            details += f"\n–°–ø–∏—Å–æ–∫ —Ç–µ–º ({len(topics)}):\n"
            for topic in topics:
                selections = await group_repo.get_topic_selections(topic.id)
                details += f"- {topic.title} ({len(selections)}/{topic_list.max_participants_per_topic})\n"
            if not user.group_membership.is_leader and not user.group_membership.is_assistant:
                keyboard.button(text="–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É", callback_data=f"select_topic_{event.id}")
        if queue:
            participants = await group_repo.get_queue_participants(queue.id)
            details += f"\n–û—á–µ—Ä–µ–¥—å ({len(participants)}/{queue.max_participants or '‚àû'}):\n"
            for participant in participants:
                participant_user = await user_repo.get_user_with_group_info(participant.user_id)
                details += f"{participant.position}. {participant_user.first_name} {participant_user.last_name or ''}\n"
            if not user.group_membership.is_leader and not user.group_membership.is_assistant:
                keyboard.button(text="–ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ", callback_data=f"select_queue_{event.id}")

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ä–æ—Å—Ç –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
        if user.group_membership.is_leader or user.group_membership.is_assistant:
            keyboard.button(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_event_{event.id}")
            keyboard.button(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_event_{event.id}")

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
        keyboard.button(text="–ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="week_back")
        await callback.message.edit_text(details, reply_markup=keyboard.as_markup())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_event_details: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data == "week_back")
async def handle_week_back(callback: CallbackQuery, user_repo: UserRepo, group_repo: GroupRepo):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é."""
    try:
        user = await user.get_user_with_group_info(callback.from_id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        group = user.group_membership.group
        today = datetime.now().date()
        start_of_week = today - timedelta(days=today.weekday())
        events = await group_repo.get_group_events(group.id)
        calendar = get_weekly_calendar(events, start_of_week)
        await callback.message.edit_text(
            f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π –≥—Ä—É–ø–ø—ã ¬´{group.name}¬ª (–Ω–µ–¥–µ–ª—è —Å {start_of_week.strftime('%Y-%m-%d')}):",
            reply_markup=calendar
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_week_back: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("select_topic_"))
async def handle_topic_selection(callback: CallbackQuery, group_repo: GroupRepo, user_repo: UserRepo, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã."""
    try:
        event_id = callback.data.replace("select_topic_", "")
        user = await user_repo.get_user_with_group_info(callback.from_id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        topic_list = await group_repo.get_topic_list_by_event(event_id)
        if not topic_list:
            await callback.message.edit_text("–°–ø–∏—Å–æ–∫ —Ç–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return

        topics = await group_repo.get_topics_by_topic_list(topic_list.id)
        if not topics:
            await callback.message.edit_text("–¢–µ–º –Ω–µ—Ç.")
            await callback.answer()
            return

        keyboard = InlineKeyboardBuilder()
        for topic in topics:
            selections = await group_repo.get_topic_selections(topic.id)
            topic_selections
            if len(selections) < topic_list.max_participants_per_topic:
                keyboard.button(text=f"{topic.title} ({len(selections)}/{topic_list.max_participants_per_topic})", callback_data=f"topic_{{topic.id}}")
        keyboard.button(text="–û—Ç–º–µ–Ω–∞", callback_data=f"event_{event_id}")
        await state.set_state(BookingInteraction.selecting_topic)
        await state.update_data(event_id=event_id)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=keyboard.as_markup())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_topic_selection: {e}", exc_info=True)
        await state.clear()
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("topic_"))
async def process_topic_selection(callback: CallbackQuery, group_repo: GroupRepo, user_repo: UserRepo, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã."""
    try:
        topic_id = callback.data.replace("topic_", "")
        user = await user_repo.get_user_with_group_info(callback.from_id)
        data = await state.get_data()
        event_id = data.get("event_id")

        topic_list = await group_repo.get_topic_list_by_event(event_id)
        selections = await group_repo.get_topic_selections(topic_id)
        if len(selections) >= topic_list.max_participants_per_topic:
            await callback.message.edit_text("–≠—Ç–∞ —Ç–µ–º–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.")
            await state.clear()
            await callback.answer()
            return

        await group_repo.create_topic_selection(
            topic_id=topic_id,
            user_id=user.telegram_id
        )
        topics = await group_repo.get_topics_by_topic_list(topic_list.id)
        topic = next(t for t in topics if t.id == topic_id)
        await state.clear()
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–ù–∞–∑–∞–¥", callback_data=f"event_{event_id}")
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: {topic.title}", reply_markup=keyboard.as_markup())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_topic_selection: {e}", exc_info=True)
        await state.clear()
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.callback_query(F.data.startswith("select_queue_"))
async def handle_queue_selection(callback: CallbackQuery, group_repo: GroupRepo, user_repo: UserRepo, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏."""
    try:
        event_id = callback.data.replace("select_queue_", "")
        user = await user_repo.get_user_with_group_info(callback.from_id)
        if not user or not user.group_membership:
            await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
            await callback.answer()
            return

        queue = await group_repo.get_queue_by_event(event_id)
        if not queue:
            await callback.message.edit_text("–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await callback.answer()
            return

        participants = await group_repo.get_queue_participants(queue.id)
        if queue.max_participants and len(participants) >= queue.max_participants:
            await callback.message.edit_text("–û—á–µ—Ä–µ–¥—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.")
            await callback.answer()
            return

        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–æ–±–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        taken_positions = {p.position for p in participants}
        next_position = 1
        while next_position in taken_positions:
            next_position += 1

        await group_repo.create_queue_participant(
            queue_id=queue.id,
            user_id=user.telegram_id,
            position=next_position
        )
        await state.clear()
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–ù–∞–∑–∞–¥", callback_data=f"event_{event_id}")
        await callback.message.edit_text(f"–í—ã –∑–∞–Ω—è–ª–∏ –º–µ—Å—Ç–æ #{next_position} –≤ –æ—á–µ—Ä–µ–¥–∏.", reply_markup=keyboard.as_markup())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_queue_selection: {e}", exc_info=True)
        await state.clear()
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)