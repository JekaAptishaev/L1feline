import logging
import re
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.db.repository import UserRepo, GroupRepo
from app.keyboards.reply import get_main_menu_unregistered, get_main_menu_leader, get_regular_member_menu, get_assistant_menu

router = Router()
logger = logging.getLogger(__name__)

class CreateGroup(StatesGroup):
    waiting_for_name = State()

class JoinGroup(StatesGroup):
    waiting_for_invite_token = State()

class RegisterUser(StatesGroup):
    waiting_for_last_name = State()
    waiting_for_first_name = State()
    waiting_for_middle_name = State()

@router.message(CommandStart())
async def cmd_start(message: Message, user_repo: UserRepo, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    try:
        user = await user_repo.get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username or "",
            first_name= None,
            last_name= None
        )
        await state.clear()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –§–ò–û
        if user.group_membership is None and (user.first_name == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" or user.last_name is None):
            await state.set_state(RegisterUser.waiting_for_last_name)
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
            return

        if user.group_membership:
            group_member = user.group_membership
            if group_member.is_leader:
                await message.answer(
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! –í—ã —Å—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã ¬´{group_member.group.name}¬ª.",
                    reply_markup=get_main_menu_leader()
                )
            elif group_member.is_assistant:
                await message.answer(
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! –í—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥—Ä—É–ø–ø—ã ¬´{group_member.group.name}¬ª.",
                    reply_markup=get_assistant_menu()
                )
            else:
                await message.answer(
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! –í—ã —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã ¬´{group_member.group.name}¬ª.",
                    reply_markup=get_regular_member_menu()
                )
        else:
            await message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! –í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.",
                reply_markup=get_main_menu_unregistered()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(RegisterUser.waiting_for_last_name)
async def process_last_name(message: Message, state: FSMContext, user_repo: UserRepo):
    try:
        last_name = message.text.strip()
        if len(last_name) < 2 or len(last_name) > 50:
            await message.answer("–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await state.update_data(last_name=last_name)
        await state.set_state(RegisterUser.waiting_for_first_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_last_name: {e}")
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(RegisterUser.waiting_for_first_name)
async def process_first_name(message: Message, state: FSMContext, user_repo: UserRepo):
    try:
        first_name = message.text.strip()
        if len(first_name) < 2 or len(first_name) > 50:
            await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await state.update_data(first_name=first_name)
        await state.set_state(RegisterUser.waiting_for_middle_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç):")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_first_name: {e}")
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(RegisterUser.waiting_for_middle_name)
async def process_middle_name(message: Message, state: FSMContext, user_repo: UserRepo):
    try:
        middle_name = message.text.strip() if message.text.strip().lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None
        if middle_name and (len(middle_name) < 2 or len(middle_name) > 50):
            await message.answer("–û—Ç—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        data = await state.get_data()
        last_name = data.get("last_name")
        first_name = data.get("first_name")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –§–ò–û
        full_name_exists = await user_repo.check_full_name_exists(
            last_name=last_name,
            first_name=first_name,
            middle_name=middle_name
        )
        if full_name_exists:
            await message.answer(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –§–ò–û {last_name} {first_name} {middle_name or ''} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Ñ–∞–º–∏–ª–∏—é."
            )
            await state.set_state(RegisterUser.waiting_for_last_name)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        await user_repo.update_user(
            telegram_id=message.from_user.id,
            first_name=first_name,
            last_name=last_name,
            middle_name=middle_name,
            username=message.from_user.username or ""
        )

        await state.clear()
        await message.answer(
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}! –í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.",
            reply_markup=get_main_menu_unregistered()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_middle_name: {e}")
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üöÄ –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É")
async def start_create_group(message: Message, state: FSMContext, user_repo: UserRepo):
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if user.group_membership:
            await message.answer("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ. –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É.")
            return

        logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ CreateGroup.waiting_for_name –¥–ª—è user_id={message.from_user.id}")
        await state.set_state(CreateGroup.waiting_for_name)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_create_group: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(CreateGroup.waiting_for_name)
async def process_group_name(message: Message, state: FSMContext, group_repo: GroupRepo):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è CreateGroup.waiting_for_name: {message.text}")
    try:
        group_name = message.text.strip()
        if len(group_name) < 3:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç 3 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        if len(group_name) > 255:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        await group_repo.create_group(name=group_name, creator_id=message.from_user.id)

        await state.clear()
        await message.answer(
            f"üéâ –ì—Ä—É–ø–ø–∞ ¬´{group_name}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –í—ã —Ç–µ–ø–µ—Ä—å –µ—ë —Å—Ç–∞—Ä–æ—Å—Ç–∞.",
            reply_markup=get_main_menu_leader()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_group_name: {e}")
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ø–æ –∫–ª—é—á—É")
async def start_join_group(message: Message, state: FSMContext, user_repo: UserRepo):
    try:
        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if user.group_membership:
            await message.answer("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ. –ù–µ–ª—å–∑—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–æ–π.")
            return
        await state.set_state(JoinGroup.waiting_for_invite_token)
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_join_group")
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx):",
            reply_markup=keyboard.as_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_join_group: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "cancel_join_group")
async def cancel_join_group(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await callback.message.delete()
        await callback.message.answer("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu_unregistered())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_join_group: {e}")
        await state.clear()
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(JoinGroup.waiting_for_invite_token)
async def process_invite_link(message: Message, state: FSMContext, user_repo: UserRepo, group_repo: GroupRepo):
    try:
        access_key = message.text.strip()
        match = re.match(r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$', access_key)
        if not match:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á –≤–∏–¥–∞ xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.")
            return

        group = await group_repo.get_group_by_invite(access_key)
        if not group:
            await message.answer("–ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
            return

        user = await user_repo.get_user_with_group_info(message.from_user.id)
        if not user:
            user = await user_repo.get_or_create_user(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                last_name=message.from_user.last_name or None
            )

        if await group_repo.is_user_banned(group.id, user.telegram_id):
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏, —Ç–∞–∫ –∫–∞–∫ –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏.")
            await state.clear()
            return

        await group_repo.add_member(group_id=group.id, user_id=user.telegram_id, is_leader=False)
        await state.clear()
        await message.answer(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ ¬´{group.name}¬ª!",
            reply_markup=get_regular_member_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_invite_link: {e}")
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
